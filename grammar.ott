embed
{{ coq
Require Import Ott.ext_nat.
Require Import Coq.Structures.Equalities.
Require Import Coq.Structures.Orders.
Require Import Coq.Structures.OrdersAlt.
Require Import Coq.Structures.OrdersEx.
Require Import Coq.FSets.FMapWeakList.
Require Import Coq.FSets.FMapFacts.
}}

metavar tmv, x, y ::= {{ com Term-level variable name }}
  {{ tex \ottmv{[[tmv]]} }} {{ coq nat }}

metavar hdmv ::= {{ com Hole or destination static name }}
  {{ tex \ottshdnm{[[hdmv]]} }} {{ coq nat }}

indexvar k ::= {{ coq nat }} {{ com Index for ranges }}

grammar
hddyn, d :: 'hddyn_' ::= {{ com Hole or destination dynamic name }} {{ coq list nat }} {{ tex \ottshdnm{[[hddyn]]} }}
  | ⋆ :: :: R {{ com Root namespace }} {{ coq nil }} {{ tex \ottshdnm{\star} }}
  | d . 1 :: :: S1 {{ com Subnamespace 1 }} {{ coq ([[d]] ++ (cons 1 nil)) }} {{ tex [[d]]\ottshdnm{.1} }}
  | d . 2 :: :: S2 {{ com Subnamespace 2 }} {{ coq ([[d]] ++ (cons 2 nil)) }} {{ tex [[d]]\ottshdnm{.2} }}
  | d . 3 :: :: S3 {{ com Subnamespace 3 }} {{ coq ([[d]] ++ (cons 3 nil)) }} {{ tex [[d]]\ottshdnm{.3} }}

hdnm, h :: 'hdnm_' ::= {{ com Hole or destination name }} {{ tex \ottshdnm{[[hdnm]]} }}
  | dyn d :: :: D {{ tex [[d]] }} {{ com Dynamic name }}
  | static hdmv :: :: S  {{ tex [[hdmv]] }} {{ com Static name }}

embed
{{ coq
(* Will be aliased later to mul *)
Inductive _mul : Type :=
  | Lin : _mul
  | Ur : _mul.

Definition mul_plus (p1 p2: _mul) : _mul := Ur.

Definition mul_times (p1 p2: _mul) : _mul :=
  match p1, p2 with
  | Lin, Lin => Lin
  | _, _ => Ur
  end.

Definition mul_times' (pl: list _mul) : _mul :=
  List.fold_right mul_times Lin pl.

Theorem mul_eq_dec : forall (p1 p2: _mul), {p1 = p2} + {p1 <> p2}.
Proof.
  decide equality.
Defined.

Inductive mul_IsSubtype : _mul -> _mul -> Type :=
  | mul_IsSubtypeProofEq : forall (p : _mul), mul_IsSubtype p p
  | mul_IsSubtypeProofUr : forall (p2 : _mul), mul_IsSubtype Ur p2.
Theorem mul_IsSubtype_dec : forall (p1 p2: _mul), mul_IsSubtype p1 p2 + (notT (mul_IsSubtype p1 p2)).
Proof. Admitted.

(* Will be aliased later to ext_nat *)

Theorem mode_eq_dec : forall (m1 m2: option (_mul * ext_nat)), {m1 = m2} + {m1 <> m2}.
Proof.
  decide equality. destruct a, p.
  - destruct (mul_eq_dec _m _m0), (ext_eq_dec e e0); subst; auto.
    * right. congruence.
    * right. congruence.
    * right. congruence.
Defined.
}}

grammar

mul, p :: 'mul_' ::= {{ tex \ottsmode{[[mul]]} }} {{ com Multiplicity (first component of modality) }} {{ coq _mul }}
  | ¹ :: :: Lin {{ tex \ottsmode{1} }} {{ com Linear. Neutral element of the product }} {{ coq Lin }}
  | ω :: :: Ur {{ tex \ottsmode{\omega} }} {{ com Non-linear. Absorbing for the product }} {{ coq Ur }}
  | p1 . ... . pk :: :: P {{ com Semiring product }} {{ coq (mul_times' [[p1...pk]]) }}
  | ( p ) :: S :: Paren {{ tex \ottsmode{(}[[p]]\ottsmode{)} }} {{ coq [[p]] }}

age, a :: 'age_' ::= {{ tex \ottsmode{[[age]]} }} {{ com Age (second component of modality) }} {{ coq ext_nat }}
  | ν :: :: 0 {{ tex \ottsmode{\nu} }} {{ com Born now. Neutral element of the product }} {{ coq (Fin 0) }}
  | ↑ :: :: 1 {{ tex \ottsmode{\uparrow} }} {{ com One scope older }} {{ coq (Fin 1) }}
  | ∞ :: :: Inf {{ tex \ottsmode{\infty} }} {{ com Infinitely old / static. Absorbing for the product }} {{ coq Inf }}
  | a1 · ... · ak :: :: P {{ com Semiring product }} {{ coq (age_times' [[a1...ak]]) }}
  | ( a ) :: S :: Paren {{ tex \ottsmode{(}[[a]]\ottsmode{)} }} {{ coq [[a]] }}

mode, m, n :: 'mode_' ::= {{ tex \ottsmode{[[mode]]} }} {{ com Mode (Semiring) }} {{ coq option (mul * age) }}
  | p a :: :: C {{ com Pair of a multiplicity and age }} {{ tex [[p]]\![[a]] }} {{ coq (Some (pair [[p]] [[a]])) }}
  | ☠ :: :: Err {{ tex \ottsmode{\skull} }} {{ coq None }} {{ com Error case (incompatible types, multiplicities, or ages) }}
  | m1 · ... · mk :: :: P {{ com Semiring product }} {{ coq (mode_times' [[m1...mk]]) }}
  | ( m ) :: S :: Paren {{ tex \ottsmode{(}[[m]]\ottsmode{)} }} {{ coq [[m]] }}

type, T, U :: 'type_' ::= {{ com Type }} {{ tex \ottstype{[[type]]} }} {{ coq-equality decide equality. apply mode_eq_dec. apply mode_eq_dec. apply mode_eq_dec. }}
  | 𝟏 :: :: U {{ tex \ottstype{1} }} {{ com Unit }}
  | T1 ⨁ T2 :: :: S {{ tex [[T1]]\ottstype{\oplus}[[T2]] }} {{ com Sum }}
  | T1 ⨂ T2 :: :: P {{ tex [[T1]]\ottstype{\otimes}[[T2]] }} {{ com Product }}
  | ! m T :: :: E {{ tex \ottstype{!}^{[[m]]}\,[[T]] }} {{ com Exponential }}
  | T1 ⧔ T2 :: :: A {{ tex [[T1]]\,\ottstype{\ltimes}\,[[T2]] }} {{ com Ampar type (consuming $[[T2]]$ yields $[[T1]]$) }}
  | T1 m1 → T2 :: :: F {{ tex [[T1]]\,_{[[m1]]}\!\ottstype{\to}\,[[T2]] }} {{ com Function }}
  | ⌊ T ⌋ m :: :: D {{ tex \ottstype{\lfloor}[[T]]\ottstype{\rfloor}^{[[m]]} }} {{ com Destination }}
  | ( T ) :: S :: Paren {{ tex \ottstype{(}[[T]]\ottstype{)} }} {{ coq [[T]]}}

bndr, b :: 'bndr_' ::= {{ com Type assignment to either variable, destination or hole }}
  | x : m T :: :: V {{ com Variable }} {{ tex [[x]]:_{[[m]]}[[T]] }}
  | + h : m ⌊ T ⌋ n :: :: D {{ com Destination ($[[m]]$ is its own modality; $[[n]]$ is the modality for values it accepts) }} {{ tex \ottshdnm{+}[[h]]:_{[[m]]}\ottstype{\lfloor}[[T]]\ottstype{\rfloor}^{[[n]]} }}
  | - h : n T :: :: H {{ com Hole ($[[n]]$ is the modality for values it accepts, it doesn't have a modality on its own) }} {{ tex \ottshdnm{-}[[h]]:^{[[n]]}[[T]] }}

embed
{{ coq
Inductive name : Type :=
  | name_X : tmv -> name
  | name_HD : hdnm -> name.

Module Name_as_UDT <: UsualDecidableType.
  Definition t := name.

  Definition eq := @eq name.
  Definition eq_refl := @eq_refl name.
  Definition eq_sym := @eq_sym name.
  Definition eq_trans := @eq_trans name.

  (* Define the eq_dec function *)
  Theorem eq_dec : forall x y : name, {x = y} + {x <> y}.
  Proof.
    intros x y. induction x.
    - induction y.
        + assert ({t0 = t1} + {t0 <> t1}) by apply Nat.eq_dec. destruct H.
           * left. rewrite e. reflexivity.
           * right. congruence.
        + right. congruence.
    - induction y.
        + right. congruence.
        + induction h, h0.
          * assert ({d = d0} + {d <> d0}) by apply (list_eq_dec Nat.eq_dec). destruct H.
            ** left. rewrite e. reflexivity.
            ** right. congruence.
          * right. congruence.
          * right. congruence.
          * assert ({hdmv5 = hdmv0} + {hdmv5 <> hdmv0}) by apply Nat.eq_dec. destruct H.
            ** left. rewrite e. reflexivity.
            ** right. congruence.
    Defined.

  Instance eq_equiv : Equivalence Name_as_UDT.eq. split. exact eq_refl. exact eq_sym. exact eq_trans. Defined.

End Name_as_UDT.

Definition name_eq_dec := Name_as_UDT.eq_dec.

Module Name_as_UDTOrig := Backport_DT(Name_as_UDT).
Module CtxM := FMapWeakList.Make(Name_as_UDTOrig).

Definition type_eq_dec : forall (T1 T2: type), {T1 = T2} + {T1 <> T2} := eq_type.

Definition age_eq_dec : forall (a1 a2: age), {a1 = a2} + {a1 <> a2} := ext_eq_dec.
Definition age_times (a1 a2 : age) : age := ext_plus a1 a2.
Definition age_times' (al: list age) : age := ext_plus' al.
Inductive age_IsSubtype : age -> age -> Type :=
  age_IsSubtypeProofInf : forall (a2 : age), age_IsSubtype Inf a2.
Theorem age_IsSubtype_dec : forall (a1 a2: age), age_IsSubtype a1 a2 + (notT (age_IsSubtype a1 a2)).
Proof. Admitted.

Definition mode_plus (m1 m2: mode) : mode :=
  match m1, m2 with
  | None, _ => None
  | _, None => None
  | Some (p1, a1), Some (p2, a2) => match a1, a2 with
    | _, Inf => Some (mul_plus p1 p2, Inf)
    | Inf, _ => Some (mul_plus p1 p2, Inf)
    | _, _ => match a1, a2 with
      | Fin n1, Fin n2 => match Nat.eq_dec n1 n2 with
        | left _ => (* true *) Some (mul_plus p1 p2, Fin n1)
        | right _ => (* false *) None
        end
      | Inf, Inf => Some (mul_plus p1 p2, Inf)
      | _, _ => None
      end
    end
  end.

Definition mode_times (m1 m2: mode) : mode :=
  match m1, m2 with
  | None, _ => None
  | _, None => None
  | Some (p1, a1), Some (p2, a2) => Some (mul_times p1 p2, age_times a1 a2)
  end.

Definition mode_times' (ml: list mode) : mode :=
  List.fold_right mode_times (Some (Lin, Fin 0)) ml.

Inductive mode_IsSubtype : mode -> mode -> Type :=
  | mode_IsSubtypeProofNone : forall (m1 : mode), mode_IsSubtype m1 None
  | mode_IsSubtypeProofPair : forall (p1 p2 : _mul) (a1 a2 : age), mul_IsSubtype p1 p2 -> age_IsSubtype a1 a2 -> mode_IsSubtype (Some (p1, a1)) (Some (p2, a2)).
Theorem mode_IsSubtype_dec : forall (m1 m2: mode), mode_IsSubtype m1 m2 + (notT (mode_IsSubtype m1 m2)).
Proof. Admitted.

Inductive mode_IsValid : mode -> Type :=
  mode_IsValidProof : forall (pa : mul * age), mode_IsValid (Some pa).
Theorem mode_IsValid_dec : forall (m : mode), mode_IsValid m + (notT (mode_IsValid m)).
Proof.
  intros m. destruct m as [pa|].
  - left. exact (mode_IsValidProof pa).
  - right. intros contra. inversion contra.
Qed.

Inductive mode_IsLin : mode -> Type :=
  mode_IsLinProof : forall (a : age), mode_IsLin (Some (Lin, a)).
Theorem mode_IsLin_dec : forall (m : mode), mode_IsLin m + (notT (mode_IsLin m)).
Proof.
  intros m. destruct m as [pa|].
  - destruct pa as [p a]. destruct p.
    + left. exact (mode_IsLinProof a).
    + right. intros contra. inversion contra.
  - right. intros contra. inversion contra.
Qed.

Inductive mode_IsUr : mode -> Type :=
  mode_IsUrProof : forall (a : age), mode_IsUr (Some (Ur, a)).
Theorem mode_IsUr_dec : forall (m : mode), mode_IsUr m + (notT (mode_IsUr m)).
Proof.
  intros m. destruct m as [pa|].
  - destruct pa as [p a]. destruct p.
    + right. intros contra. inversion contra.
    + left. exact (mode_IsUrProof a).
  - right. intros contra. inversion contra.
Qed.

Definition bndr_name (b : bndr) : name :=
  match b with
  | bndr_V x m T => name_X x
  | bndr_H h m T => name_HD h
  | bndr_D h m1 T m2 => name_HD h
  end.

Definition bndr_mode (b : bndr) : mode := match b with
  | bndr_V _ m _ => m
  | bndr_H _ m _ => m
  | bndr_D _ m1 _ m2 => m1
  end.

Definition bndr_update_mode (b:bndr) (m:mode) := match b with
  | bndr_V x _ T => bndr_V x m T
  | bndr_H h _ T => bndr_H h m T
  | bndr_D h _ T m2 => bndr_D h m T m2
  end.

Inductive bndr_IsVar : bndr -> Type :=
  bndr_IsVarProof : forall x m T, bndr_IsVar (bndr_V x m T).
Theorem bndr_IsVar_dec : forall (b: bndr), bndr_IsVar b + (notT (bndr_IsVar b)).
Proof.
  intros b. destruct b.
  - left. exact (bndr_IsVarProof x m T).
  - right. intros contra. inversion contra.
  - right. intros contra. inversion contra.
Qed.

Inductive bndr_IsDest : bndr -> Type :=
  bndr_IsDestProof : forall h m T n, bndr_IsDest (bndr_D h m T n).
Theorem bndr_IsDest_dec : forall (b: bndr), bndr_IsDest b + (notT (bndr_IsDest b)).
Proof.
  intros b. destruct b.
  - right. intros contra. inversion contra.
  - left. exact (bndr_IsDestProof h m T n).
  - right. intros contra. inversion contra.
Qed.

Inductive bndr_IsHole : bndr -> Type :=
  bndr_IsHoleProof : forall h m T, bndr_IsHole (bndr_H h m T).
Theorem bndr_IsHole_dec : forall (b: bndr), bndr_IsHole b + (notT (bndr_IsHole b)).
Proof.
  intros b. destruct b.
  - right. intros contra. inversion contra.
  - right. intros contra. inversion contra.
  - left. exact (bndr_IsHoleProof h n T).
Qed.

Definition ctx_DestOnly (G : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> bndr_IsDest b.
Definition ctx_HoleOnly (G : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> bndr_IsHole b.
Definition ctx_VarOnly (G : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> bndr_IsVar b.
Definition ctx_NoDest (G : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> notT (bndr_IsDest b).
Definition ctx_NoHole (G : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> notT (bndr_IsHole b).
Definition ctx_NoVar (G : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> notT (bndr_IsVar b).
Definition ctx_IsValid (G: CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> mode_IsValid (bndr_mode b).
Definition ctx_SubsetEq (G1 G2 : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G1 -> CtxM.MapsTo n b G2.
Definition ctx_HdnmNotMem (h : hdnm) (G : CtxM.t bndr) : Type :=
  ~CtxM.In (name_HD h) G.
Definition ctx_OnlyLin (G : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> mode_IsLin (bndr_mode b).
Definition ctx_OnlyUr (G : CtxM.t bndr) : Type :=
  forall n b, CtxM.MapsTo n b G -> mode_IsUr (bndr_mode b).
Inductive ctx_Compatible : CtxM.t bndr -> bndr -> Type :=
  | ctx_CompatibleProofV : forall G x m1 m2 T, CtxM.MapsTo (name_X x) (bndr_V x m1 T) G -> mode_IsSubtype m1 m2 -> ctx_OnlyUr (CtxM.remove (name_X x) G) -> ctx_Compatible G (bndr_V x m2 T)
  | ctx_CompatibleProofD : forall G h m11 m2 m21 T, CtxM.MapsTo (name_HD h) (bndr_D h m11 T m2) G -> mode_IsSubtype m11 m21 -> ctx_OnlyUr (CtxM.remove (name_HD h) G) -> ctx_Compatible G (bndr_D h m21 T m2)
  | ctx_CompatibleProofH : forall G h m1 m2 T, CtxM.MapsTo (name_HD h) (bndr_H h m1 T) G -> mode_IsSubtype m1 m2 -> ctx_OnlyUr (CtxM.remove (name_HD h) G) -> ctx_Compatible G (bndr_H h m2 T).

Axiom ctx_Coherent: forall (G : CtxM.t bndr) n b, CtxM.MapsTo n b G -> (bndr_name b) = n.

Inductive bndr_CompatibleTypes : bndr -> bndr -> Type :=
  | bndr_CompatibleTypesProofV : forall x m1 m2 T, bndr_CompatibleTypes (bndr_V x m1 T) (bndr_V x m2 T)
  | bndr_CompatibleTypesProofD : forall h m11 m2 m21 T, bndr_CompatibleTypes (bndr_D h m11 T m2) (bndr_D h m21 T m2)
  | bndr_CompatibleTypesProofH : forall h m1 m2 T, bndr_CompatibleTypes (bndr_H h m1 T) (bndr_H h m2 T).

Theorem bndr_CompatibleTypes_dec : forall (b b' : bndr), bndr_CompatibleTypes b b'+notT (bndr_CompatibleTypes b b').
Proof.
  intros b b'. assert ({bndr_name b = bndr_name b'} + {bndr_name b <> bndr_name b'}) by apply name_eq_dec. destruct H as [name_eq|name_neq].
  - unfold bndr_name in name_eq. destruct b eqn:Hb in name_eq. destruct b' eqn:Hb' in name_eq. assert ({T = T0} + {T <> T0}) by apply type_eq_dec. destruct H as [T_eq|T_neq].
    * left. assert (x = x0) as x_eq. injection name_eq. tauto. rewrite Hb, Hb'. rewrite (eq_sym x_eq). rewrite (eq_sym T_eq). exact (bndr_CompatibleTypesProofV x m m0 T).
    * right. intros contra. inversion contra. rewrite Hb in H. congruence. rewrite Hb in H. congruence. rewrite Hb in H. congruence.
    * right. intros contra. inversion contra. rewrite Hb in H. congruence. rewrite Hb in H. congruence. rewrite Hb in H. congruence.
    * right. intros contra. inversion contra. rewrite Hb in H. congruence. rewrite Hb in H. congruence. rewrite Hb in H. congruence.
    * destruct b' eqn:Hb' in name_eq. congruence.
      ** assert (h = h0) as h_eq. injection name_eq. tauto. rewrite Hb, Hb'. rewrite (eq_sym h_eq). assert ({n = n0} + {n <> n0}) by apply mode_eq_dec. destruct H as [n_eq|n_neq]. assert ({T = T0} + {T <> T0}) by apply type_eq_dec. destruct H as [T_eq|T_neq]. left. rewrite (eq_sym T_eq). rewrite (eq_sym n_eq). exact (bndr_CompatibleTypesProofD h m n m0 T).
      right. intros contra. inversion contra. congruence. right. intros contra. inversion contra. congruence.
      ** right. intros contra. inversion contra. rewrite Hb in H. congruence. rewrite Hb in H. congruence. rewrite Hb in H. congruence.
    * destruct b' eqn:Hb' in name_eq. congruence.
      ** right. intros contra. inversion contra. rewrite Hb in H. congruence. rewrite Hb in H. congruence. rewrite Hb in H. congruence.
      ** assert (h = h0) as h_eq. injection name_eq. tauto. rewrite Hb, Hb'. rewrite (eq_sym h_eq). assert ({T = T0} + {T <> T0}) by apply type_eq_dec. destruct H as [T_eq|T_neq]. left. rewrite (eq_sym T_eq).  exact (bndr_CompatibleTypesProofH h n n0 T).
      right. intros contra. inversion contra. congruence.
  - right. intros contra. inversion contra. rewrite (eq_sym H) in name_neq. rewrite (eq_sym H0) in name_neq. unfold bndr_name in name_neq. congruence. rewrite (eq_sym H) in name_neq. rewrite (eq_sym H0) in name_neq. unfold bndr_name in name_neq. congruence. rewrite (eq_sym H) in name_neq. rewrite (eq_sym H0) in name_neq. unfold bndr_name in name_neq. congruence.
Qed.

Inductive bndr_IncompatibleTypes : bndr -> bndr -> Type :=
  | bndr_IncompatibleTypesProofV : forall x m1 m2 T1 T2, T1 <> T2 -> bndr_IncompatibleTypes (bndr_V x m1 T1) (bndr_V x m2 T2)
  | bndr_IncompatibleTypesProofD : forall h m11 m12 m21 m22 T1 T2, (type_D T1 m12) <> (type_D T2 m22) -> bndr_IncompatibleTypes (bndr_D h m11 T1 m12) (bndr_D h m21 T2 m22)
  | bndr_IncompatibleTypesProofH : forall h m1 m2 T1 T2, T1 <> T2 -> bndr_IncompatibleTypes (bndr_H h m1 T1) (bndr_H h m2 T2).

Theorem bndr_IncompatibleTypes_dec : forall (b b' : bndr), bndr_IncompatibleTypes b b'+ (notT (bndr_IncompatibleTypes b b')).
Proof. Admitted.

Inductive bndr_Interact : bndr -> bndr -> Type :=
  bndr_InteractProof : forall h m1 m21 m22 T, (m1 = (mode_plus m21 m22)) -> mode_IsLin m1 -> bndr_Interact (bndr_H h m1 T) (bndr_D h m21 T m22). (* case bndr_DestHoleOrHoleDestProofHDInt *)

Inductive bndr_DestHoleOrHoleDest : bndr -> bndr -> Type :=
  | bndr_DestHoleOrHoleDestProofHDInt : forall b b', bndr_Interact b b' -> bndr_DestHoleOrHoleDest b b'
  | bndr_DestHoleOrHoleDestProofHDNoInt : forall h m1 m21 m22 T1 T2, ((m1 <> (mode_plus m21 m22)) + (notT (mode_IsLin m1)) + (T1 <> T2)) -> bndr_DestHoleOrHoleDest (bndr_H h m1 T1) (bndr_D h m21 T2 m22)
  | bndr_DestHoleOrHoleDestProofDH : forall h m11 m12 m2 T1 T2, bndr_DestHoleOrHoleDest (bndr_D h m11 T1 m12) (bndr_H h m2 T2).

Theorem bndr_DestHoleOrHoleDest_dec : forall (b b' : bndr), bndr_DestHoleOrHoleDest b b'+ (notT (bndr_DestHoleOrHoleDest b b')).
Proof. Admitted.

Theorem bndr_AddCases_dec : forall (b b' : bndr), (bndr_name b = bndr_name b') ->
    ((bndr_CompatibleTypes b b' * (notT (bndr_IncompatibleTypes b b')) * (notT (bndr_DestHoleOrHoleDest b b')))
  + ((notT (bndr_CompatibleTypes b b')) * bndr_IncompatibleTypes b b' * (notT (bndr_DestHoleOrHoleDest b b')))
  + ((notT (bndr_CompatibleTypes b b')) * (notT (bndr_IncompatibleTypes b b')) * bndr_DestHoleOrHoleDest b b')).
Proof. Admitted.

Theorem ctx_add (b' : bndr) (G : CtxM.t bndr) : CtxM.t bndr.
Proof.
  destruct (CtxM.find (bndr_name b') G) eqn:Hr.
  * (* Some b *)
    assert (CtxM.MapsTo (bndr_name b') b G). apply CtxM.find_2. exact Hr.
    apply ctx_Coherent in H. destruct (bndr_AddCases_dec b b') as [ [caseComp|caseIncomp]|caseDHHD]. exact H.
    ** destruct caseComp as [ [Comp nIncomp] nDHHD]. destruct Comp.
      (* V *) exact (CtxM.add (name_X x) (bndr_V x (mode_plus m1 m2) T) G).
      (* D *) exact (CtxM.add (name_HD h) (bndr_D h (mode_plus m11 m21) T m2) G).
      (* H *) exact (CtxM.add (name_HD h) (bndr_H h (mode_plus m1 m2) T) G).
    ** destruct caseIncomp as [ [nComp Incomp] nDHHD]. destruct Incomp.
      (* V *) exact (CtxM.add (name_X x) (bndr_V x None T1) G).
      (* D *) exact (CtxM.add (name_HD h) (bndr_D h None T1 m12) G).
      (* H *) exact (CtxM.add (name_HD h) (bndr_H h None T1) G).
    ** destruct caseDHHD as [ [nComp nIncomp] DHHD]. destruct DHHD.
      (* HDInt *) destruct b0. exact (CtxM.add (name_HD h) (bndr_H h None T) G).
      (* HDNoInt *) exact (CtxM.add (name_HD h) (bndr_H h None T1) G).
      (* DH *) exact (CtxM.add (name_HD h) (bndr_D h None T1 m12) G).
  * (* None *)
    exact (CtxM.add (bndr_name b') b' G).
Defined.

Theorem ctx_add_hdint (b':bndr) (G: CtxM.t bndr) : CtxM.t bndr.
Proof.
  destruct (CtxM.find (bndr_name b') G) eqn:Hr.
  * (* Some b *)
    assert (CtxM.MapsTo (bndr_name b') b G). apply CtxM.find_2. exact Hr.
    apply ctx_Coherent in H. destruct (bndr_AddCases_dec b b') as [ [caseComp|caseIncomp]|caseDHHD]. exact H.
    ** destruct caseComp as [ [Comp nIncomp] nDHHD]. destruct Comp.
      (* V *) exact (CtxM.add (name_X x) (bndr_V x (mode_plus m1 m2) T) G).
      (* D *) exact (CtxM.add (name_HD h) (bndr_D h (mode_plus m11 m21) T m2) G).
      (* H *) exact (CtxM.add (name_HD h) (bndr_H h (mode_plus m1 m2) T) G).
    ** destruct caseIncomp as [ [nComp Incomp] nDHHD]. destruct Incomp.
      (* V *) exact (CtxM.add (name_X x) (bndr_V x None T1) G).
      (* D *) exact (CtxM.add (name_HD h) (bndr_D h None T1 m12) G).
      (* H *) exact (CtxM.add (name_HD h) (bndr_H h None T1) G).
    ** destruct caseDHHD as [ [nComp nIncomp] DHHD]. destruct DHHD.
      (* HDInt *) destruct b0. exact (CtxM.remove (name_HD h) G). (* only change compared to ctx_add *)
      (* HDNoInt *) exact (CtxM.add (name_HD h) (bndr_H h None T1) G).
      (* DH *) exact (CtxM.add (name_HD h) (bndr_D h None T1 m12) G).
  * (* None *)
    exact (CtxM.add (bndr_name b') b' G).
Defined.

Definition ctx_from_list (bs : list bndr) : CtxM.t bndr :=
  List.fold_right (fun b G => ctx_add b G) (CtxM.empty bndr) bs.

Definition ctx_union (G1 G2 : CtxM.t bndr) : CtxM.t bndr :=
  (* G1 is acc, G2 is iterated over *)
  CtxM.fold (fun n b G => ctx_add b G) G2 G1.

Definition ctx_interact (G1 G2 : CtxM.t bndr) : CtxM.t bndr :=
  (* G1 is acc, G2 is iterated over *)
  CtxM.fold (fun n b G => ctx_add_hdint b G) G2 G1.

Definition ctx_stimes (m1 : mode) (G : CtxM.t bndr) : CtxM.t bndr :=
  CtxM.map (fun b =>
    match b with
    | bndr_V x m2 T2 => bndr_V x (mode_times m1 m2) T2
    | bndr_D h m2 T2 m3 => bndr_D h (mode_times m1 m2) T2 m3
    | bndr_H h m2 T2 => bndr_H h (mode_times m1 m2) T2
    end
  ) G.

Definition ctx_minus (G : CtxM.t bndr) : CtxM.t bndr :=
  CtxM.map (fun b =>
    match b with
    | bndr_V x m2 T2 => bndr_V x None T2 (* error *)
    | bndr_D h m2 T2 m3 => bndr_H h (mode_times m2 m3) T2
    | bndr_H h m2 T2 => bndr_H h None T2 (* error *)
    end
  ) G.

Definition concat {A : Type} (ll : list (list A)) : list A :=
  List.fold_right (fun x1 x2 => x1 ++ x2) nil ll.
}}

grammar
ctx, G {{ tex \Gamma }}, D {{ tex \Delta }} :: 'ctx_' ::= {{ com Typing context }} {{ coq (CtxM.t bndr) }}
  | { b1 , .. , bk } :: :: L {{ coq (ctx_from_list [[b1..bk]]) }} {{ com List of bindings }}
  | m · G :: :: S {{ com Multiply each binding by $[[m]]$ }} {{ coq (ctx_stimes [[m]] [[G]]) }}
  | G1 ⨄ G2 :: :: U {{ coq (ctx_union [[G1]] [[G2]]) }} {{ com Sum contexts $[[G1]]$ and $[[G2]]$. Duplicates/incompatible elements will give bindings with mode $\ottsmode{\skull}$ }}
  | G1 ⁻⨄⁺ G2 :: :: I {{ coq (ctx_interact [[G1]] [[G2]]) }} {{ com Sum contexts, but allow linear holes from $[[G1]]$ to be compensated by linear dests from $[[G2]]$ }}
  | - G :: :: M {{ coq (ctx_minus [[G]]) }} {{ com Transforms every hole binding into a dest binding (requires \texttt{ctx\_DestOnly} $[[G]]$) }}
  | ( G ) :: S :: Paren {{ coq [[G]] }}

grammar
term, t, u :: 'term_' ::=                                               {{ com Term }}
  | v :: :: Val {{ com Value }}
  | x :: :: Var {{ com Variable }}
  | t ≻ u                                    ::   :: App      {{ com Application }} {{ tex [[t]]\,\succ[[u]] }}
  % | t ; u                   ::   :: PatU {{ com Pattern-match on unit }} {{ tex [[t]]\,\succ\,\ottkw{case}\,\ottsctor{()}\,\mapsto\,[[u]] }}
  | t ; u                   ::   :: PatU {{ com Pattern-match on unit }} {{ tex [[t]]~;\,[[u]] }}
  | t ≻case { Inl x1 ⟼ u1 , Inr x2 ⟼ u2 }   ::   :: PatS (+ bind x1 in u1 +) (+ bind x2 in u2 +)     {{ com Pattern-match on sum }} {{ tex [[t]]\,\succ\ottkw{case}\,\{\,\ottsctor{Inl}\,[[x1]][[⟼]][[u1]]\,,~\ottsctor{Inr}\,[[x2]][[⟼]][[u2]]\,\} }}
  | t ≻case ( x1 , x2 ) ⟼ u            ::   :: PatP (+ bind x1 in u +) (+ bind x2 in u +)     {{ com Pattern-match on product }} {{ tex [[t]]\,\succ\ottkw{case}\,\ottsctor{(}[[x1]]\,\ottsctor{,}~[[x2]]\ottsctor{)}\![[⟼]][[u]] }} 
  | t ≻case ⦆ m x ⟼ u            ::   :: PatE (+ bind x in u +)    {{ com Pattern-match on exponential }} {{ tex [[t]]\,\succ\ottkw{case}~\expcons{[[m]]}[[x]][[⟼]][[u]] }}
  | t ≻map x ⟼ u :: :: Map (+ bind x in u +) {{ com Map over the right side of the ampar }} {{ tex [[t]]\,\succ\ottkw{map}~[[x]]\![[⟼]][[u]] }}

  % | toGlobal t :: :: ToGlobal {{ tex \ottkw{to}_{\ottsmode{\scriptstyle G} } }} {{ com Mode coercion to ${\ottsmode{\scriptstyle G} }$ }}
  % | fromGlobal t :: :: FromGlobal {{ tex \ottkw{from}_{\ottsmode{\scriptstyle G} } }} {{ com Mode coercion from ${\ottsmode{\scriptstyle G} }$ }}
  | to⧔ t :: :: ToA {{ tex \ottkw{to}_{\ottstype{\ltimes} }\,[[t]] }} {{ com Wrap $[[t]]$ into a trivial ampar }}
  | from⧔ t :: :: FromA {{ tex \ottkw{from}_{\ottstype{\ltimes} }\,[[t]] }} {{ com Extract value from trivial ampar }}

  | alloc T :: :: Alloc {{ com Return a fresh "identity" ampar object }} {{ tex \ottkw{alloc}_{ [[T]]} }}
  | t ⨞ () :: :: FillU {{ com Fill destination with unit }}
  | t ⨞ Inl                          ::   :: FillL   {{ com Fill destination with left variant }}
  | t ⨞ Inr                          ::   :: FillR   {{ com Fill destination with right variant }}
  | t ⨞ (,)                              ::   :: FillP    {{ com Fill destination with product constructor }}
  | t ⨞ ⦆ m :: :: FillE {{ com Fill destination with exponential constructor }} {{ tex [[t]][[⨞]]\expcons{[[m]]} }}
  | t ⨞· u :: :: FillC {{ com Fill destination with root of ampar $[[u]]$ }} {{ tex [[t]]\triangleleft\!\mybullet\,[[u]] }}

  | ( t )                                   :: S :: Paren {{ coq [[t]] }}
  | t [ x ≔ v ]                             :: M :: Sub {{ coq (term_sub [[t]] [[x]] [[v]]) }} {{ tex [[t]][ [[x]] \coloneq [[v]] ] }}
  % | b sp t b spe :: S :: BreakSpacing1
  % | b sp t :: S :: BreakSpaacing2
  % | t b spe : : S :: BreakSpacing3

val, v :: 'val_' ::= {{ com Term value }}
  | - h :: :: H {{ com Hole }} {{ tex \ottshdnm{-}[[h]] }}
  | + h :: :: D {{ tex \ottshdnm{+}[[h]] }} {{ com Destination }}
  | () :: :: U {{ com Unit }}
  | λ x ⟼ t :: :: F (+ bind x in t +) {{ tex \lamnt{[[x]]}{[[t]]} }} {{ com Lambda abstraction }}
  | Inl v :: :: L {{ com Left variant for sum }}
  | Inr v :: :: R {{ com Right variant for sum }}
  | ⦆ m v :: :: E {{ tex \expcons{[[m]]}[[v]] }} {{ com Exponential }}
  | ( v1 , v2 ) :: :: P {{ tex \ottsctor{(}[[v1]]\,\ottsctor{,}~[[v2]]\ottsctor{)} }} {{ com Product }}
  | ⟨ v1 ❟ v2 ⟩ D :: :: A {{ com Ampar }} {{ tex \ottsctor{\langle}[[v1]]\,\ottsctor{\bbcomma}~[[v2]]\ottsctor{\rangle}_{[[D]]} }}
  | v [ hf ] :: M :: Effect {{ coq (val_hfill [[v]] [[hf]]) }}
  | ( v ) :: S :: Paren {{ coq [[v]] }}

hf, f :: 'hf_' ::= {{ com Hole filling }}
  | h ≔ v :: :: F {{ tex [[h]]\coloneq[[v]] }} {{ com Fill $[[h]]$ with value $[[v]]$ (that may contain holes) }}

grammar
eff, e :: 'eff_' ::= {{ com Effect }} {{ tex \ottseff{[[eff]]} }} {{ coq list hf }}
  | ε :: :: N {{ tex \ottseff{\varepsilon} }} {{ coq nil }} {{ com No-op effect }}
  | f :: :: S {{ coq (cons [[f]] nil) }} {{ com Single hole assignment }}
  | e1 » .. » ek :: :: C {{ com Chain effects }} {{ coq (concat [[e1..ek]]) }}
  | ( e ) :: S :: Paren {{ coq [[e]] }}

embed
{{ coq
Fixpoint term_sub_name (t: term) (n : name) (v : val) : term := match t with
  | term_Val v' => term_Val (val_sub_name v' n v)
  | term_Var y => match name_eq_dec n (name_X y) with
    | left _ => term_Val v
    | right _ => term_Var y
    end
  | term_App t1 t2 => term_App (term_sub_name t1 n v) (term_sub_name t2 n v)
  | term_PatU t1 t2 => term_PatU (term_sub_name t1 n v) (term_sub_name t2 n v)
  | term_PatS t' x1 u1 x2 u2 =>
    let u1' := match name_eq_dec n (name_X x1) with
      | left _ => (* shadowing *) u1
      | right _ => term_sub_name u1 n v
    end in
    let u2' := match name_eq_dec n (name_X x2) with
      | left _ => (* shadowing *) u2
      | right _ => term_sub_name u2 n v
    end in term_PatS (term_sub_name t' n v) x1 u1' x2 u2'
  | term_PatP t' x1 x2 u => match name_eq_dec n (name_X x1), name_eq_dec n (name_X x2) with
    | right _, right _ => term_PatP (term_sub_name t' n v) x1 x2 (term_sub_name u n v)
    | _, _ => (* at least one shadowing *) term_PatP (term_sub_name t' n v) x1 x2 u
    end
  | term_PatE t' m x' u => let u' := match name_eq_dec n (name_X x') with
      | left _ => (* shadowing *) u
      | right _ => term_sub_name u n v
    end in term_PatE (term_sub_name t' n v) m x' u'
  | term_Map t' x' u => let u' := match name_eq_dec n (name_X x') with
      | left _ => (* shadowing *) u
      | right _ => term_sub_name u n v
    end in term_Map (term_sub_name t' n v) x' u'
  | term_ToA t' => term_ToA (term_sub_name t' n v)
  | term_FromA t' => term_FromA (term_sub_name t' n v)
  | term_Alloc T => term_Alloc T
  | term_FillU t1 => term_FillU (term_sub_name t1 n v)
  | term_FillL t1 => term_FillL (term_sub_name t1 n v)
  | term_FillR t1 => term_FillR (term_sub_name t1 n v)
  | term_FillP t1 => term_FillP (term_sub_name t1 n v)
  | term_FillE t1 m => term_FillE (term_sub_name t1 n v) m
  | term_FillC t u => term_FillC (term_sub_name t n v) (term_sub_name u n v)
end
with val_sub_name (v': val) (n:name) (v:val) : val := match v' with
  | val_F x' u => let u' := match name_eq_dec n (name_X x') with
    | left _ => (* shadowing *) u
    | right _ => term_sub_name u n v
    end in val_F x' u'
  | val_H h => match name_eq_dec n (name_HD h) with
    | left _ => v
    | right _ => val_H h
  end
  | val_D h => val_D h
  | val_U => val_U
  | val_L v'' => val_L (val_sub_name v'' n v)
  | val_R v'' => val_R (val_sub_name v'' n v)
  | val_E m v'' => val_E m (val_sub_name v'' n v)
  | val_P v1 v2 => val_P (val_sub_name v1 n v) (val_sub_name v2 n v)
  | val_A v1 v2 D => val_A (val_sub_name v1 n v) (val_sub_name v2 n v) D
end.

Definition term_sub (t: term) (x:tmv) (v:val) : term := term_sub_name t (name_X x) v.
Definition val_hfill (v' : val) (f : hf) : val := match f with
  | hf_F h v => val_sub_name v' (name_HD h) v
  end.
}}

grammar

% spacing, sp :: 'sp_' ::= {{ tex \ottssp{[[spacing]]} }}
%   | s :: :: space1 {{ tex \myspace{1} }}
%   | ss :: :: space2 {{ tex \myspace{2} }}
%   | sss :: :: space3 {{ tex \myspace{3} }}
%   | ssss :: :: space4 {{ tex \myspace{4} }}
%   | sssss :: :: space5 {{ tex \myspace{5} }}
%   | ssssss :: :: space6 {{ tex \myspace{6} }}

% spacing_end, spe :: 'spe_' ::= {{ tex \ottssp{[[spacing_end]]} }}
%   | se :: :: space1e {{ tex \myspace{1} }}
%   | sse :: :: space2e {{ tex \myspace{2} }}
%   | ssse :: :: space3e {{ tex \myspace{3} }}
%   | sssse :: :: space4e {{ tex \myspace{4} }}
%   | ssssse :: :: space5e {{ tex \myspace{5} }}
%   | sssssse :: :: space6e {{ tex \myspace{6} }}

terminals :: 'terminals_' ::=

% === Term syntax ===
  | ⟼                                     ::   :: Mapsto       {{ tex \mapsto }}
  | () :: :: unit {{ tex \ottsctor{()} }}
  | Inl :: :: inl {{ tex \ottsctor{Inl} }}
  | Inr :: :: inr {{ tex \ottsctor{Inr} }}
  | (,) :: :: prod {{ tex \ottsctor{({,})} }}
  | ⨞ :: :: fill {{ tex \triangleleft }}
  | · :: :: semiring {{ tex \ottsmode{\hspace{-0.1ex}\cdot\hspace{-0.1ex} } }}
  | » :: :: chain {{ tex \gg }}

% === Contexts ===
  | ⨄ :: :: union {{ tex \cupplus }}
  | ⁻⨄⁺ :: :: interact {{ tex ^{\,\,\,\scriptscriptstyle\ottshdnm{-}\!\!}\cupplus^{\scriptscriptstyle\!\!\ottshdnm{+} }\, }}

% === Typing & Semantics ===
  | ⤋ :: :: effred {{ tex \text{\raisebox{-0.7ex}{\rotatebox{90}{$\Lleftarrow$}\!\!} } }}
  | ⋄ :: :: diam {{ tex ~\diamond~ }}
  | ⇓ :: :: downto {{ tex ~\Downarrow~ }}
  | ⊢ :: :: vdash {{ tex \,\vdash\, }}
  | ⫦ :: :: dvdash {{ tex \,\Vdash\, }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred :: '_' ::= {{ com Serves for the .mng file. Isn't used in the actual rules }}
  | ctx_DestOnly G :: :: ctx_DestOnly {{ tex \texttt{ctx\_DestOnly}~[[G]] }}
  | ctx_HoleOnly G :: :: ctx_HoleOnly {{ tex \texttt{ctx\_HoleOnly}~[[G]] }}
  | ctx_VarOnly G :: :: ctx_VarOnly {{ tex \texttt{ctx\_VarOnly}~[[G]] }}
  | ctx_NoDest G :: :: ctx_NoDest {{ tex \texttt{ctx\_NoDest}~[[G]] }}
  | ctx_NoHole G :: :: ctx_NoHole {{ tex \texttt{ctx\_NoHole}~[[G]] }}
  | ctx_NoVar G :: :: ctx_NoVar {{ tex \texttt{ctx\_NoVar}~[[G]] }}
  | ctx_IsValid G :: :: ctx_IsValid {{ tex \texttt{ctx\_Valid}~[[G]] }}
  | ctx_SubsetEq G1 G2 :: :: ctx_SubsetEq {{ tex \texttt{ctx\_SubsetEq}~[[G1]]~[[G2]] }}
  | ctx_HdnmNotMem h G :: :: ctx_HdnmNotMem {{ tex \texttt{ctx\_NotMem}~[[h]]~[[G]] }}
  | ctx_Compatible G b :: :: ctx_Compatible {{ tex \texttt{ctx\_Compatible}~[[G]]~[[b]] }}
  | ctx_OnlyLin G :: :: ctx_OnlyLin {{ tex \texttt{ctx\_OnlyLin}~[[G]] }}
  | ctx_OnlyUr G :: :: ctx_OnlyUr {{ tex \texttt{ctx\_OnlyUr}~[[G]] }}
  | mode_IsValid m :: :: mode_IsValid {{ tex \texttt{mode\_Valid}~[[m]] }}
  | mode_IsLin m :: :: mode_IsLin {{ tex \texttt{mode\_Lin}~[[m]] }}
  | mode_IsUr m :: :: mode_IsUr {{ tex \texttt{mode\_Ur}~[[m]] }}

  | ctx_Disjoint G1 G2 :: :: ctx_Disjoint {{ tex \texttt{ctx\_Disjoint}~[[G1]]~[[G2]] }} {{ com TODO: Just for legacy proof; remove }}

  | G ⫦ e :: :: TyR_eff
  | G ⫦ t : T :: :: TyR_term
  | G ⊢ e :: :: Ty_eff
  | G ⊢ t : T :: :: Ty_term
  | G ⊢ v ⋄ e : T :: :: Ty_cmd

  | v1 D1 | e1 ⤋ v2 D2 | e2 :: :: Sem_eff {{ tex [[v1]]_{~[[D1]]}\,|~[[e1]]~~[[⤋]]~~[[v2]]_{~[[D2]]}\,|~[[e2]] }}
  | t d ⇓ v ⋄ e :: :: Sem_term {{ tex [[t]]~_{\scriptscriptstyle[[d]]\!\!\!\!\!}[[⇓]][[v]][[⋄]][[e]] }}

parsing
ctx_U <= ctx_S
ctx_S <= ctx_M
ctx_U left ctx_U

