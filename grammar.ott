embed
{{ coq
Require Import Ott.ext_nat.
Require Import Coq.Structures.Equalities.
Require Import Coq.Structures.Orders.
Require Import Coq.Structures.OrdersAlt.
Require Import Coq.Structures.OrdersEx.
Require Import Coq.FSets.FMapList.
Require Import Coq.FSets.FSetList.
Require Import Coq.FSets.FMapFacts.
Require Import Coq.FSets.FSetFacts.

Module Nat_as_OTOrig := Backport_OT(Nat_as_OT).
Module HdnsM := FSetList.Make(Nat_as_OTOrig).

Parameter _ctx: Type.

(* We need to predefine eq_dec for mode so that Ott can generate eq_dec for type *)
(* Will be aliased later to mul *)
Inductive _mul : Type :=
  | Lin : _mul
  | Ur : _mul.
Theorem mul_eq_dec : forall (p1 p2: _mul), {p1 = p2} + {p1 <> p2}.
Proof.
  decide equality.
Defined.
Definition age_eq_dec : forall (a1 a2: ext_nat), {a1 = a2} + {a1 <> a2} := ext_eq_dec.
Theorem mode_eq_dec : forall (m1 m2: option (_mul * ext_nat)), {m1 = m2} + {m1 <> m2}.
Proof.
  decide equality. destruct a, p.
  - destruct (mul_eq_dec _m _m0), (age_eq_dec e e0); subst; auto.
    * right. congruence.
    * right. congruence.
    * right. congruence.
Defined.
}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NAMES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

metavar var, x, y ::= {{ com Term-level variable name }}
 {{ tex \ottmv{[[var]]} }} {{ coq nat }}

indexvar k ::= {{ coq nat }} {{ com Index for ranges }}

grammar

hdn, h :: 'hdn_' ::= {{ com Hole or destination name ($\mathbb{N}$) }} {{ coq nat }} {{ tex \ottshdn{[[hdn]]} }}
  | 1 :: S :: O {{ coq 1 }} {{ tex \ottshdn{1} }}
  | 2 :: S :: T {{ coq 2 }} {{ tex \ottshdn{2} }}
  | h + h' :: M :: S {{ com Sum }} {{ coq ([[h]] + [[h']]) }} {{ tex [[h]]\ottshdn{+}[[h']] }}
  | max ( H ) :: M :: M {{ com Maximum of a set of holes }} {{ coq (hdns_max_hnames [[H]]) }} {{ tex \ottshdn{max(}[[H]]\ottshdn{)} }}
  | ( h ) :: S :: Paren {{ coq [[h]] }} {{ tex \ottshdn{(}[[h]]\ottshdn{)} }}

hdns, H :: 'hdns_' ::= {{ com Set of hole names }} {{ coq HdnsM.t }} {{ tex \ottshdn{[[hdns]]} }}
  | { h1 , .. , hk } :: :: L {{ coq (hdns_from_list [[h1..hk]]) }}
  | H1 ‚à™ H2 :: M :: U {{ com Union of sets }} {{ coq (HdnsM.union [[H1]] [[H2]]) }} {{ tex [[H1]]\ottshdn{\cup}\,[[H2]] }}
  | H ‚©≤ h :: M :: S {{ com Increase all names from $[[H]]$ by $[[h]]$. }} {{ coq (hdns_incr_hnames [[H]] [[h]]) }}
  | hnames ( G ) :: M :: C {{ com Hole names of a context (requires $\texttt{ctx\_NoVar}([[G]])$) }} {{ tex \ottshdn{hnames(}[[G]]\ottshdn{)} }} {{ coq (hdns_from_ctx [[G]]) }}
  | hnames ( C ) :: M :: E {{ com Hole names of an evaluation context }} {{ tex \ottshdn{hnames(}[[C]]\ottshdn{)} }} {{ coq (hdns_from_ectxs [[C]]) }}
  | ( H ) :: S :: Paren {{ coq [[H]] }} {{ tex \ottshdn{(}[[H]]\ottshdn{)} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LANGUAGE SYNTAX (STATIC)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

term, t, u :: 'term_' ::= {{ com Term }}
  | v :: :: Val {{ com Value }}
  | x :: :: Var {{ com Variable }}
  | t ‚âª u :: :: App {{ com Application }} {{ tex [[t]]\,\succ[[u]] }}
  | t ; u :: :: PatU {{ com Pattern-match on unit }} {{ tex [[t]]~;\,[[u]] }}
  | t ‚âªcase m { Inl x1 ‚üº u1 , Inr x2 ‚üº u2 } :: :: PatS {{ com Pattern-match on sum }} {{ tex [[t]]\,\succ\ottkw{case}_{[[m]]}\,\{\,\ottsctor{Inl}\,[[x1]][[‚üº]][[u1]]\,,~\ottsctor{Inr}\,[[x2]][[‚üº]][[u2]]\,\} }} % (+ bind x1 in u1 +) (+ bind x2 in u2 +)
  | t ‚âªcase m ( x1 , x2 ) ‚üº u :: :: PatP {{ com Pattern-match on product }} {{ tex [[t]]\,\succ\ottkw{case}_{[[m]]}\,\ottsctor{(}[[x1]]\,\ottsctor{,}~[[x2]]\ottsctor{)}\![[‚üº]][[u]] }} % (+ bind x1 in u +) (+ bind x2 in u +)
  | t ‚âªcase m ·¥á n x ‚üº u :: :: PatE {{ com Pattern-match on exponential }} {{ tex [[t]]\,\succ\ottkw{case}_{[[m]]}\,\expcons{[[n]]}[[x]][[‚üº]][[u]] }} % (+ bind x in u +)
  | t ‚âªmap x ‚üº u :: :: Map {{ com Map over the right side of ampar $[[t]]$ }} {{ tex [[t]]\,\succ\ottkw{map}~[[x]]\![[‚üº]][[u]] }} % (+ bind x in u +
  | to‚ßî t :: :: ToA {{ tex \ottkw{to}_{\ottstype{\ltimes} }\,[[t]] }} {{ com Wrap $[[t]]$ into a trivial ampar }}
  | from‚ßî t :: :: FromA {{ tex \ottkw{from}_{\ottstype{\ltimes} }\,[[t]] }} {{ com Extract value from trivial ampar }}

  | alloc :: :: Alloc {{ com Return a fresh "identity" ampar object }} {{ tex \ottkw{alloc} }}
  | t ‚®û () :: :: FillU {{ com Fill destination with unit }}
  | t ‚®û Inl :: :: FillL {{ com Fill destination with left variant }}
  | t ‚®û Inr :: :: FillR {{ com Fill destination with right variant }}
  | t ‚®û ·¥á m :: :: FillE {{ com Fill destination with exponential constructor }} {{ tex [[t]][[‚®û]]\expcons{[[m]]} }}
  | t ‚®û (,) :: :: FillP {{ com Fill destination with product constructor }}
  | t ‚®û ( Œª x m ‚üº u ) :: :: FillF {{ com Fill destination with function }} {{ tex [[t]][[‚®û]](\lamnt{[[x]]}{[[m]]}{[[u]]}) }} % (+ bind x in u +)
  | t ‚®û¬∑ u :: :: FillC {{ com Fill destination with root of ampar $[[u]]$ }} {{ tex [[t]]\triangleleft\!\mybullet\,[[u]] }}

  | t [ x ‚âî v ] :: M :: Sub {{ coq (term_sub [[t]] [[x]] [[v]]) }} {{ tex [[t]][ [[x]] \coloneq [[v]] ] }}
  | ( t ) :: S :: Paren {{ coq [[t]] }}
  % | b sp t b spe :: S :: BreakSpacing1
  % | b sp t :: S :: BreakSpaacing2
  % | t b spe : : S :: BreakSpacing3

val, v :: 'val_' ::= {{ com Term value }}
  | - h :: :: H {{ com Hole }} {{ tex \ottshdn{-}[[h]] }}
  | + h :: :: D {{ tex \ottshdn{+}[[h]] }} {{ com Destination }}
  | () :: :: U {{ com Unit }}
  | Œª·µõ x m ‚üº t :: :: F {{ tex \lamvnt{[[x]]}{[[m]]}{[[t]]} }} {{ com Lambda abstraction }} % (+ bind x in t +)
  | Inl v :: :: L {{ com Left variant for sum }}
  | Inr v :: :: R {{ com Right variant for sum }}
  | ·¥á m v :: :: E {{ tex \expcons{[[m]]}[[v]] }} {{ com Exponential }}
  | ( v1 , v2 ) :: :: P {{ tex \ottsctor{(}[[v1]]\,\ottsctor{,}~[[v2]]\ottsctor{)} }} {{ com Product }}
  | H ‚ü® v1 ‚ùü v2 ‚ü© :: :: A {{ com Ampar }} {{ tex _{[[H]]\!}\ottsctor{\langle}[[v1]]\,\ottsctor{\bbcomma}~[[v2]]\ottsctor{\rangle} }}
  | v ‚©≤ h :: M :: Rename {{ com Rename hole names inside $[[v]]$ by shifting them by $[[h]]$ }} {{ coq (val_incr_hnames [[v]] [[h]]) }}
  | ( v ) :: S :: Paren {{ coq [[v]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DYNAMIC SYNTAX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ectxs, C :: 'ectxs_' ::= {{ com Evaluation context stack }} {{ coq (list ectx) }}
  | ‚¨ú :: :: N {{ coq nil }} {{ com Represent the empty stack / "identity" evaluation context }}
%  | c :: S :: S {{ coq (cons [[c]] nil) }}
  | C ‚àò c :: :: C {{ coq (cons [[c]] [[C]]) }} {{ tex [[C]]\,\circ\,[[c]] }} {{ com Push $[[c]]$ on top of $[[C]]$ }}
  | C [ h ‚âî H v ] :: M :: Fill {{ tex [[C]][ [[h]]\coloneq_{[[H]]}\,[[v]] ] }} {{ com Fill $[[h]]$ in $[[C]]$ with value $[[v]]$ (that may contain holes) }} {{ coq (ectxs_fill [[C]] [[h]] [[v]]) }}
  | ( C ) :: S :: Paren {{ coq [[C]] }}

ectx, c :: 'ectx_' ::= {{ com Evaluation context component }}
  | ‚¨ú ‚âª u :: :: AppFoc1 {{ com Application }} {{ tex [[‚¨ú]]\,\succ[[u]] }}
  | v ‚âª ‚¨ú :: :: AppFoc2 {{ com Application }} {{ tex [[v]]\,\succ[[‚¨ú]] }}
  | ‚¨ú ; u :: :: PatUFoc {{ com Pattern-match on unit }} {{ tex [[‚¨ú]]~;\,[[u]] }}
  | ‚¨ú ‚âªcase m { Inl x1 ‚üº u1 , Inr x2 ‚üº u2 } :: :: PatSFoc {{ com Pattern-match on sum }} {{ tex [[‚¨ú]]\,\succ\ottkw{case}_{[[m]]}\,\{\,\ottsctor{Inl}\,[[x1]][[‚üº]][[u1]]\,,~\ottsctor{Inr}\,[[x2]][[‚üº]][[u2]]\,\} }} % (+ bind x1 in u1 +) (+ bind x2 in u2 +)
  | ‚¨ú ‚âªcase m ( x1 , x2 ) ‚üº u :: :: PatPFoc {{ com Pattern-match on product }} {{ tex [[‚¨ú]]\,\succ\ottkw{case}_{[[m]]}\,\ottsctor{(}[[x1]]\,\ottsctor{,}~[[x2]]\ottsctor{)}\![[‚üº]][[u]] }}  % (+ bind x1 in u +) (+ bind x2 in u +) 
  | ‚¨ú ‚âªcase m ·¥á n x ‚üº u :: :: PatEFoc {{ com Pattern-match on exponential }} {{ tex [[‚¨ú]]\,\succ\ottkw{case}_{[[m]]}\,\expcons{[[n]]}[[x]][[‚üº]][[u]] }} % (+ bind x in u +)
  | ‚¨ú ‚âªmap x ‚üº u :: :: MapFoc {{ com Map over the right side of ampar }} {{ tex [[‚¨ú]]\,\succ\ottkw{map}~[[x]]\![[‚üº]][[u]] }} % (+ bind x in u +)

  | to‚ßî ‚¨ú :: :: ToAFoc {{ tex \ottkw{to}_{\ottstype{\ltimes} }\,[[‚¨ú]] }} {{ com Wrap into a trivial ampar }}
  | from‚ßî ‚¨ú :: :: FromAFoc {{ tex \ottkw{from}_{\ottstype{\ltimes} }\,[[‚¨ú]] }} {{ com Extract value from trivial ampar }}
  | ‚¨ú ‚®û () :: :: FillUFoc {{ com Fill destination with unit }}
  | ‚¨ú ‚®û Inl :: :: FillLFoc {{ com Fill destination with left variant }}
  | ‚¨ú ‚®û Inr :: :: FillRFoc {{ com Fill destination with right variant }}
  | ‚¨ú ‚®û ·¥á m :: :: FillEFoc {{ com Fill destination with exponential constructor }} {{ tex [[‚¨ú]][[‚®û]]\expcons{[[m]]} }}
  | ‚¨ú ‚®û (,) :: :: FillPFoc {{ com Fill destination with product constructor }}
  | ‚¨ú ‚®û ( Œª x m ‚üº u ) :: :: FillFFoc {{ com Fill destination with function }} {{ tex [[‚¨ú]][[‚®û]](\lamnt{[[x]]}{[[m]]}{[[u]]}) }} % (+ bind x in u +)
  | ‚¨ú ‚®û¬∑ u :: :: FillCFoc1 {{ com Fill destination with root of ampar }} {{ tex [[‚¨ú]]\triangleleft\!\mybullet\,[[u]] }}
  | v ‚®û¬∑ ‚¨ú :: :: FillCFoc2 {{ com Fill destination with root of ampar }} {{ tex [[v]]\triangleleft\!\mybullet\,[[‚¨ú]] }}
  | H ·µí·µñ‚ü® v1 ‚ùü ‚¨ú :: :: AOpenFoc {{ tex ^{\text{op}\!}_{[[H]]\!}\ottsctor{\langle}[[v1]]\,\ottsctor{\bbcomma}~[[‚¨ú]] }} {{ com Open ampar. \textcolor{red}{Only new addition to term shapes} }}
  | ( c ) :: S :: Paren {{ coq [[c]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TYPING SYNTAX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type, T, U :: 'type_' ::= {{ com Type }} {{ tex \ottstype{[[type]]} }} {{ coq-equality decide equality. apply mode_eq_dec. apply mode_eq_dec. apply mode_eq_dec. }}
  | ùüè :: :: U {{ tex \ottstype{1} }} {{ com Unit }}
  | T1 ‚®Å T2 :: :: S {{ tex [[T1]]\ottstype{\oplus}[[T2]] }} {{ com Sum }}
  | T1 ‚®Ç T2 :: :: P {{ tex [[T1]]\ottstype{\otimes}[[T2]] }} {{ com Product }}
  | ! m T :: :: E {{ tex \ottstype{!}^{[[m]]}\,[[T]] }} {{ com Exponential }}
  | T1 ‚ßî T2 :: :: A {{ tex [[T1]]\,\ottstype{\ltimes}\,[[T2]] }} {{ com Ampar type (consuming $[[T2]]$ yields $[[T1]]$) }}
  | T1 m1 ‚Üí T2 :: :: F {{ tex [[T1]]\,_{[[m1]]}\!\ottstype{\to}\,[[T2]] }} {{ com Function }}
  | ‚åä T ‚åã m :: :: D {{ tex \ottstype{\lfloor}[[T]]\ottstype{\rfloor}^{[[m]]} }} {{ com Destination }}
  | ( T ) :: S :: Paren {{ tex \ottstype{(}[[T]]\ottstype{)} }} {{ coq [[T]]}}

mode, m, n :: 'mode_' ::= {{ tex \ottsmode{[[mode]]} }} {{ com Mode (Semiring) }} {{ coq option (mul * age) }}
  | p a :: :: C {{ com Pair of a multiplicity and age }} {{ tex [[p]]\![[a]] }} {{ coq (Some (pair [[p]] [[a]])) }}
  | ‚ò† :: :: Err {{ tex \ottsmode{\skull} }} {{ coq None }} {{ com Error case (incompatible types, multiplicities, or ages) }}
  | m1 ¬∑ ... ¬∑ mk :: M :: P {{ com Semiring product }} {{ coq (mode_times' [[m1...mk]]) }}
  | ( m ) :: S :: Paren {{ tex \ottsmode{(}[[m]]\ottsmode{)} }} {{ coq [[m]] }}

mul, p :: 'mul_' ::= {{ tex \ottsmode{[[mul]]} }} {{ com Multiplicity (first component of modality) }} {{ coq _mul }}
  | ¬π :: :: Lin {{ tex \ottsmode{1} }} {{ com Linear. Neutral element of the product }} {{ coq Lin }}
  | œâ :: :: Ur {{ tex \ottsmode{\omega} }} {{ com Non-linear. Absorbing for the product }} {{ coq Ur }}
  | p1 . ... . pk :: M :: P {{ com Semiring product }} {{ coq (mul_times' [[p1...pk]]) }}
  | ( p ) :: S :: Paren {{ tex \ottsmode{(}[[p]]\ottsmode{)} }} {{ coq [[p]] }}

age, a :: 'age_' ::= {{ tex \ottsmode{[[age]]} }} {{ com Age (second component of modality) }} {{ coq ext_nat }}
  | ŒΩ :: :: 0 {{ tex \ottsmode{\nu} }} {{ com Born now. Neutral element of the product }} {{ coq (Fin 0) }}
  | ‚Üë :: :: 1 {{ tex \ottsmode{\uparrow} }} {{ com One scope older }} {{ coq (Fin 1) }}
  | ‚àû :: :: Inf {{ tex \ottsmode{\infty} }} {{ com Infinitely old / static. Absorbing for the product }} {{ coq Inf }}
  | a1 ¬∑ ... ¬∑ ak :: M :: P {{ com Semiring product }} {{ coq (age_times' [[a1...ak]]) }}
  | ( a ) :: S :: Paren {{ tex \ottsmode{(}[[a]]\ottsmode{)} }} {{ coq [[a]] }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Hidden in final document, just for Coq generation

tyb_var :: 'tyb_' ::=
  | ‚Çì m T :: :: Var {{ tex \,\!_{[[m]]}[[T]] }}
tyb_dh :: 'tyb_' ::=
  | ‚Çä m ‚åä T ‚åã n :: :: Dest {{ tex \,\!_{[[m]]}\ottstype{\lfloor}[[T]]\ottstype{\rfloor}^{[[n]]} }}
  | ‚Çã T n :: :: Hole {{ tex [[T]]^{[[n]]} }}

name :: 'name_' ::=
  | À£ x :: :: Var {{ tex [[x]] }}
  |  ∞ h :: :: DH {{ tex [[h]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ctx, G {{ tex \Gamma }}, D {{ tex \Delta }}, P {{ tex \Pi }} :: 'ctx_' ::= {{ com Typing context }} {{ coq _ctx }}
  % | ‚¶Ö mvar mdest mhole ‚¶Ü :: :: Maps {{ com Actual representation of contexts for Coq proofs (cannot hide) }} {{ tex \llparenthesis\,[[mvar]]~[[mdest]]~[[mhole]]\,\rrparenthesis }}
  | { } :: S :: E {{ coq ctx_empty }}
  | { x : m T } :: :: V {{ coq (ctx_singleton (name_Var [[x]]) (tyb_Var [[m]] [[T]])) }} {{ tex \{[[x]]:\,\!_{[[m]]}[[T]]\} }}
  | { + h : m ‚åä T ‚åã n } :: :: D {{ coq (ctx_singleton (name_DH [[h]]) (tyb_Dest [[m]] [[T]] [[n]])) }} {{ tex \{\ottshdn{+}[[h]]:\,\!_{[[m]]}\ottstype{\lfloor}[[T]]\ottstype{\rfloor}^{[[n]]}\} }}
  | { - h : T n } :: :: H {{ coq (ctx_singleton (name_DH [[h]]) (tyb_Hole [[T]] [[n]])) }} {{ tex \{\ottshdn{-}[[h]]:[[T]]^{[[n]]}\} }}
  | m ¬∑ G :: M :: S {{ com Multiply each binding by $[[m]]$ }} {{ coq (ctx_stimes [[m]] [[G]]) }}
  | G1 ‚®Ñ G2 :: M :: U {{ coq (ctx_union [[G1]] [[G2]]) }} {{ com Sum contexts $[[G1]]$ and $[[G2]]$. Duplicate keys with incompatible values will be tagged with $\ottsmode{\skull}$ }}
  | - G :: M :: M {{ coq (ctx_minus [[G]]) }} {{ com Transforms dest bindings into a hole bindings (requires \texttt{ctx\_DestOnly} $[[G]]$ and \texttt{ctx\_LinOnly} $[[G]]$) }}
  | ( G ) :: S :: Paren {{ coq [[G]] }}

embed
{{ coq
(******************************************************************************
 * NAMES
 *****************************************************************************)

Fixpoint hdns_from_list (l : list nat) : HdnsM.t :=
  match l with
  | nil => HdnsM.empty
  | h :: t => HdnsM.add h (hdns_from_list t)
  end.

Definition hdns_max_hnames (H : HdnsM.t) : nat :=
  HdnsM.fold (fun k acc => max k acc) H 0.

Definition hdns_incr_hnames (H : HdnsM.t) (h' : nat) : HdnsM.t :=
  HdnsM.fold (fun h acc => HdnsM.add (h + h') acc) H HdnsM.empty.

Definition hdns_from_ctx (G : ctx) : HdnsM.t. Admitted. (* TODO complete *)

Definition hdns_from_ectxs (C : ectxs) : HdnsM.t. Admitted. (* TODO complete *)

Definition hdns_Disjoint (H1 H2 : HdnsM.t) : Prop :=
  HdnsM.Empty (HdnsM.inter H1 H2).

(******************************************************************************
 * TERMS STATIC BEHAVIOUR
 *****************************************************************************)

(******************************************************************************
 * TERMS DYNAMIC BEHAVIOUR
 *****************************************************************************)

Definition term_sub (t: term) (x:var) (v:val) : term. Admitted. (* TODO complete *)
Definition ectxs_fill (C: ectxs) (h:hdn) (v:val) : ectxs. Admitted. (* TODO complete *)
Definition val_incr_hnames (v : val) (h : hdn) : val. Admitted. (* TODO complete *)

Definition term_NotVal (t: term) : Prop. Admitted. (* put it to Type instead for shape info? *) (* TODO complete *)

(******************************************************************************
 * TYPE
 *****************************************************************************)

(* Alias to the one defined by Ott *)
Definition type_eq_dec : forall (T1 T2: type), {T1 = T2} + {T1 <> T2} := eq_type.

(******************************************************************************
 * MULTIPLICITY
 *****************************************************************************)

Definition mul_plus (p1 p2: _mul) : _mul := Ur.
Definition mul_times (p1 p2: _mul) : _mul :=
  match p1, p2 with
  | Lin, Lin => Lin
  | _, _ => Ur
  end.
Definition mul_times' (pl: list _mul) : _mul :=
  List.fold_right mul_times Lin pl.
Inductive mul_IsSubtype : _mul -> _mul -> Prop :=
  | mul_IsSubtypeProofEq : forall (p : _mul), mul_IsSubtype p p
  | mul_IsSubtypeProofUr : forall (p2 : _mul), mul_IsSubtype Ur p2.
Theorem mul_IsSubtype_dec : forall (p1 p2: _mul), {mul_IsSubtype p1 p2} + {~mul_IsSubtype p1 p2}.
Proof.
  intros p1 p2. destruct p1, p2.
  - left. exact (mul_IsSubtypeProofEq Lin).
  - right. intros contra. inversion contra.
  - left. exact (mul_IsSubtypeProofUr Lin).
  - left. exact (mul_IsSubtypeProofEq Ur).
Defined.

(******************************************************************************
 * AGE
 *****************************************************************************)

Definition age_times (a1 a2 : age) : age := ext_plus a1 a2.
Definition age_times' (al: list age) : age := ext_plus' al.
Inductive age_IsSubtype : age -> age -> Prop :=
  | age_IsSubtypeProofEq : forall (a : age), age_IsSubtype a a
  | age_IsSubtypeProofInf : forall (a2 : age), age_IsSubtype Inf a2.
Theorem age_IsSubtype_dec : forall (a1 a2: age), {age_IsSubtype a1 a2} + {~(age_IsSubtype a1 a2)}.
Proof.
  intros a1 a2. destruct a1, a2.
  - assert ({n = n0} + {n <> n0}) by apply Nat.eq_dec. destruct H.
    * rewrite e. left. exact (age_IsSubtypeProofEq (Fin n0)).
    * right. intros contra. inversion contra. congruence.
  - right. intros contra. inversion contra.
  - left. exact (age_IsSubtypeProofInf (Fin n)).
  - left. exact (age_IsSubtypeProofEq Inf).
Defined.

(******************************************************************************
 * MODE
 *****************************************************************************)

Definition mode_plus (m1 m2: mode) : mode :=
  match m1, m2 with
  | None, _ => None
  | _, None => None
  | Some (p1, a1), Some (p2, a2) => match a1, a2 with
    | _, Inf => Some (mul_plus p1 p2, Inf)
    | Inf, _ => Some (mul_plus p1 p2, Inf)
    | _, _ => match a1, a2 with
      | Fin n1, Fin n2 => match Nat.eq_dec n1 n2 with
        | left _ => (* true *) Some (mul_plus p1 p2, Fin n1)
        | right _ => (* false *) None
        end
      | Inf, Inf => Some (mul_plus p1 p2, Inf)
      | _, _ => None
      end
    end
  end.
Definition mode_times (m1 m2: mode) : mode :=
  match m1, m2 with
  | None, _ => None
  | _, None => None
  | Some (p1, a1), Some (p2, a2) => Some (mul_times p1 p2, age_times a1 a2)
  end.
Definition mode_times' (ml: list mode) : mode :=
  List.fold_right mode_times (Some (Lin, Fin 0)) ml.
Inductive mode_IsSubtype : mode -> mode -> Prop :=
  | mode_IsSubtypeProofNone : forall (m2 : mode), mode_IsSubtype None m2 (* skull represents contradictory requirements, so we must never be able to provide a value with multiplicity skull *)
  | mode_IsSubtypeProofPair : forall (p1 p2 : _mul) (a1 a2 : age), mul_IsSubtype p1 p2 -> age_IsSubtype a1 a2 -> mode_IsSubtype (Some (p1, a1)) (Some (p2, a2)).
Theorem mode_IsSubtype_dec : forall (m1 m2: mode), {mode_IsSubtype m1 m2} + {~mode_IsSubtype m1 m2}.
Proof.
  intros m1 m2. destruct m1 as [(p1 & a1)|], m2 as [(p2 & a2)|].
  - destruct (mul_IsSubtype_dec p1 p2), (age_IsSubtype_dec a1 a2).
    + left. exact (mode_IsSubtypeProofPair p1 p2 a1 a2 m a).
    + right. intros contra. inversion contra. congruence.
    + right. intros contra. inversion contra. congruence.
    + right. intros contra. inversion contra. congruence.
  - right. intros contra. inversion contra.
  - left. exact (mode_IsSubtypeProofNone (Some (p2, a2))).
  - left. exact (mode_IsSubtypeProofNone None).
Defined.
Inductive mode_IsValid : mode -> Prop :=
  mode_IsValidProof : forall (pa : mul * age), mode_IsValid (Some pa).
Theorem mode_IsValid_dec : forall (m : mode), {mode_IsValid m} + {~mode_IsValid m}.
Proof.
  intros m. destruct m as [pa|].
  - left. exact (mode_IsValidProof pa).
  - right. intros contra. inversion contra.
Qed.
Inductive mode_IsLin : mode -> Prop :=
  mode_IsLinProof : forall (a : age), mode_IsLin (Some (Lin, a)).
Theorem mode_IsLin_dec : forall (m : mode), {mode_IsLin m} + {~mode_IsLin m}.
Proof.
  intros m. destruct m as [pa|].
  - destruct pa as [p a]. destruct p.
    + left. exact (mode_IsLinProof a).
    + right. intros contra. inversion contra.
  - right. intros contra. inversion contra.
Qed.
Inductive mode_IsUr : mode -> Prop :=
  mode_IsUrProof : forall (a : age), mode_IsUr (Some (Ur, a)).
Theorem mode_IsUr_dec : forall (m : mode), {mode_IsUr m} + {~mode_IsUr m}.
Proof.
  intros m. destruct m as [pa|].
  - destruct pa as [p a]. destruct p.
    + right. intros contra. inversion contra.
    + left. exact (mode_IsUrProof a).
  - right. intros contra. inversion contra.
Qed.

(******************************************************************************
 * BINDERS
 *****************************************************************************)

(******************************************************************************
 * CONTEXTS
 *****************************************************************************)

(******************************************************************************
 * CONTEXTS
 *****************************************************************************)

Definition ctx_DestOnly (G : ctx) : Prop. Admitted. (* TODO complete *)
Definition ctx_LinOnly (G : ctx) : Prop. Admitted. (* TODO complete *)
Definition ctx_IsValid (G: ctx) : Prop. Admitted. (* TODO complete *)
Definition ctx_Disjoint (G1 G2 : ctx) : Prop. Admitted. (* TODO complete *)
Definition ctx_CompatibleDH (G: ctx) (h: hdn) (tyb: tyb_dh) : Prop. Admitted. (* TODO complete *)
Definition ctx_CompatibleVar (G: ctx) (x: var) (tyb: tyb_var) : Prop. Admitted. (* TODO complete *)
Definition ctx_union (G1 G2 : ctx) : ctx. Admitted. (* TODO complete *)
Definition ctx_stimes (m1 : mode) (G : ctx) : ctx. Admitted. (* TODO complete *)
Definition ctx_minus (G : ctx) : ctx. Admitted. (* TODO complete *)
Definition NameTypeB (v : name) : Type :=
  match v with
  | name_Var x => tyb_var
  | name_DH h => tyb_dh
  end.

Definition ctx_singleton (v : name) (tyb: NameTypeB v): ctx. Admitted.
Definition ctx_empty : ctx. Admitted.

(*****************************************************************************)
}}

grammar

% spacing, sp :: 'sp_' ::= {{ tex \ottssp{[[spacing]]} }}
%   | s :: :: space1 {{ tex \myspace{1} }}
%   | ss :: :: space2 {{ tex \myspace{2} }}
%   | sss :: :: space3 {{ tex \myspace{3} }}
%   | ssss :: :: space4 {{ tex \myspace{4} }}
%   | sssss :: :: space5 {{ tex \myspace{5} }}
%   | ssssss :: :: space6 {{ tex \myspace{6} }}

% spacing_end, spe :: 'spe_' ::= {{ tex \ottssp{[[spacing_end]]} }}
%   | se :: :: space1e {{ tex \myspace{1} }}
%   | sse :: :: space2e {{ tex \myspace{2} }}
%   | ssse :: :: space3e {{ tex \myspace{3} }}
%   | sssse :: :: space4e {{ tex \myspace{4} }}
%   | ssssse :: :: space5e {{ tex \myspace{5} }}
%   | sssssse :: :: space6e {{ tex \myspace{6} }}

terminals :: 'terminals_' ::=

% === Term syntax ===
  | ‚¨ú :: :: idectx {{ tex \square }}
  | ‚üº :: :: mapsto {{ tex \mapsto }}
  | () :: :: unit {{ tex \ottsctor{()} }}
  | Inl :: :: inl {{ tex \ottsctor{Inl} }}
  | Inr :: :: inr {{ tex \ottsctor{Inr} }}
  | (,) :: :: prod {{ tex \ottsctor{({,})} }}
  | ‚®û :: :: fill {{ tex \triangleleft }}
  | ¬∑ :: :: semiring {{ tex \ottsmode{\hspace{-0.1ex}\cdot\hspace{-0.1ex} } }}
  | ‚©≤ :: :: rename {{ tex \pluseq }}

% === Contexts ===
  | ‚®Ñ :: :: union {{ tex \cupplus }}

% === Typing & Semantics ===
  | ‚ü∂ :: :: red {{ tex ~\longrightarrow~ }}
  | ‚ä¢ :: :: vdash {{ tex \,\vdash\, }}
  | ‚ä£ :: :: dashv {{ tex \,\dashv\, }}
  | ‚´¶ :: :: dvdash {{ tex \,\Vdash\, }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred :: '_' ::= {{ com Serves for the .mng file. Isn't used in the actual rules }}
  | ctx_DestOnly G :: :: ctx_DestOnly {{ tex \texttt{ctx\_DestOnly}~[[G]] }}
  | ctx_LinOnly G :: :: ctx_LinOnly {{ tex \texttt{ctx\_LinOnly}~[[G]] }}
  | ctx_IsValid G :: :: ctx_IsValid {{ tex \texttt{ctx\_Valid}~[[G]] }}
  | ctx_Compatible G b :: :: ctx_Compatible {{ tex \texttt{ctx\_Compatible}~[[G]]~[[b]] }}
  | ctx_Disjoint G1 G2 :: :: ctx_Disjoint {{ tex \texttt{ctx\_Disjoint}~[[G1]]~[[G2]] }}
  | mode_IsValid m :: :: mode_IsValid {{ tex \texttt{mode\_Valid}~[[m]] }}
  | mode_IsLin m :: :: mode_IsLin {{ tex \texttt{mode\_Lin}~[[m]] }}
  | mode_IsUr m :: :: mode_IsUr {{ tex \texttt{mode\_Ur}~[[m]] }}
  | term_NotVal t :: :: term_NotVal {{ tex \texttt{NotVal}~[[t]] }}

  | G ‚´¶ v : T :: :: TyR_val
  | P ‚ä¢ t : T :: :: Ty_term
  | D ‚ä£ C : T1 ‚Ü£ T2 :: :: Ty_ectxs {{ com Typing of evaluation contexts }} {{ tex [[D]][[‚ä£]][[C]]:[[T1]]\ottstype{\rightarrowtail}[[T2]] }}
  | ‚ä¢ C [ t ] : T :: :: Ty_eterm
  | C [ t ] ‚ü∂ C' [ t' ] :: :: Sem_eterm

parsing
ctx_U <= ctx_S
ctx_S <= ctx_M
ctx_U left ctx_U
term_Val <= term_Paren
