Require Import List.
Require Import Ott.ott_list_core.
Require Import Ott.destination_calculus_ott.
Require Import Ott.destination_calculus_notations.
Require Import Ott.ext_nat.
Require Import Coq.Program.Equality.
Require Import Ott.Finitely.
From Hammer Require Import Hammer.
From Hammer Require Import Tactics.

Lemma ValidOnlyUnionBackward : forall (G1 G2 : ctx), ctx_ValidOnly (G1 ‚®Ñ G2) -> ctx_ValidOnly G1 /\ ctx_ValidOnly G2.
Proof. Admitted.
Lemma ValidOnlyUnionForward : forall (G1 G2 : ctx), ctx_ValidOnly G1 -> ctx_ValidOnly G2 -> ctx_Disjoint G1 G2 -> ctx_ValidOnly (G1 ‚®Ñ G2).
Proof. Admitted.
Lemma ValidOnlyStimesEquiv : forall (m : mode) (G : ctx), ctx_ValidOnly (m ·¥≥¬∑ G) <-> ctx_ValidOnly G /\ mode_IsValid m.
Proof. Admitted.
Lemma ValidOnlyMinusEquiv : forall (G : ctx), ctx_ValidOnly (·¥≥-G) <-> ctx_LinNuOnly G /\ ctx_DestOnly G.
Proof. Admitted.
Lemma DestOnlyUnionEquiv : forall (G1 G2 : ctx), ctx_DestOnly (G1 ‚®Ñ G2) <-> ctx_DestOnly G1 /\ ctx_DestOnly G2.
Proof. Admitted.
Lemma DestOnlyStimesEquiv : forall (m : mode) (G : ctx), ctx_DestOnly G <-> ctx_DestOnly (m ·¥≥¬∑ G).
Proof. Admitted.

Lemma LinNuOnlyUnionEquiv : forall (G1 G2 : ctx), ctx_LinNuOnly (G1 ‚®Ñ G2) <-> ctx_LinNuOnly G1 /\ ctx_LinNuOnly G2 /\ ctx_Disjoint G1 G2.
Proof. Admitted.
Lemma LinNuOnlyStimesEquiv : forall (m : mode) (G : ctx), ctx_LinNuOnly (m ·¥≥¬∑ G) <-> ctx_LinNuOnly G /\ mode_IsLinNu m.
Proof. Admitted.

Lemma LinOnlyUnionEquiv : forall (G1 G2 : ctx), ctx_LinOnly (G1 ‚®Ñ G2) <-> ctx_LinOnly G1 /\ ctx_LinOnly G2 /\ ctx_Disjoint G1 G2.
Proof. Admitted.
Lemma LinOnlyStimesEquiv : forall (m : mode) (G : ctx), ctx_LinOnly (m ·¥≥¬∑ G) <-> ctx_LinOnly G /\ mode_IsLin m.
Proof. Admitted.

Lemma LinNuOnlyWkLinOnly : forall (G : ctx), ctx_LinNuOnly G -> ctx_LinOnly G.
Proof. Admitted.
Lemma LinOnlyWkValidOnly : forall (G : ctx), ctx_LinOnly G -> ctx_ValidOnly G.
Proof. Admitted.

Lemma IsLinNuWkIsLin : forall (m : mode), mode_IsLinNu m -> mode_IsLin m.
Proof. Admitted.
Lemma IsLinWkIsValid : forall (m : mode), mode_IsLin m -> mode_IsValid m. Proof.
  intros m H. destruct H. apply (mode_IsValidProof (Lin, a)).
Qed.

Lemma DisjointStimesLeftEquiv : forall (m : mode) (D D' : ctx), ctx_Disjoint (m ·¥≥¬∑ D) D' <-> ctx_Disjoint D D'.
Proof. Admitted.
Lemma DisjointStimesRightEquiv : forall (m : mode) (D D' : ctx), ctx_Disjoint D (m ·¥≥¬∑ D') <-> ctx_Disjoint D D'.
Proof. Admitted.
Lemma DisjointMinusLeftEquiv : forall (D D' : ctx), ctx_Disjoint D D' <-> ctx_Disjoint (·¥≥-D) D'.
Proof. Admitted.
Lemma DisjointMinusRightEquiv : forall (D D' : ctx), ctx_Disjoint D D' <-> ctx_Disjoint D (·¥≥-D').
Proof. Admitted.
Lemma DisjointNestedLeftEquiv : forall (D D' D'' : ctx), ctx_Disjoint (D ‚®Ñ D') D'' <-> ctx_Disjoint D D'' /\ ctx_Disjoint D' D''.
Proof. Admitted.
Lemma DisjointNestedRightEquiv : forall (D D' D'' : ctx), ctx_Disjoint D  (D' ‚®Ñ D'') <-> ctx_Disjoint D D' /\ ctx_Disjoint D D''.
Proof. Admitted.

Lemma hdns_DisjointImpliesDisjoint : forall (D D' : ctx) (C : ectxs) (T U0: type) (TyC: D ‚ä£ C : T ‚Ü£ U0) (DisjointCD': hdns_Disjoint hnamesÍü≤( C) hnames·¥≥(D')), ctx_Disjoint D D'.
Proof. Admitted.

Lemma EmptyIsLinOnly : ctx_LinOnly ·¥≥{}. (* TODO remove when we have actual definition of ctx_ValidOnly *)
Proof. Admitted.

Lemma EmptyUnionRight : forall (G : ctx), G = G ‚®Ñ ·¥≥{}.
Proof. Admitted.
Lemma EmptyUnionLeft : forall (G : ctx), G = ·¥≥{} ‚®Ñ G.
Proof. Admitted.

Lemma DisjointDestOnlyVar : forall (G : ctx) (x : var) (m : mode) (T : type), ctx_DestOnly G -> ctx_Disjoint G (·¥≥{ x : m ‚Äó T}).
Proof. Admitted.

Lemma UnionCommutative : forall (G1 G2 : ctx), G1 ‚®Ñ G2 = G2 ‚®Ñ G1.
Proof. Admitted.
Lemma UnionAssociative : forall (G1 G2 G3 : ctx), G1 ‚®Ñ (G2 ‚®Ñ G3) = (G1 ‚®Ñ G2) ‚®Ñ G3.
Proof. Admitted.

Lemma StimesIsAction : forall (m n : mode) (G : ctx), m ·¥≥¬∑ (n ·¥≥¬∑ G) = (m ¬∑ n) ·¥≥¬∑ G.
Proof. Admitted.

Lemma TimesCommutative : forall (m n : mode), m ¬∑ n = n ¬∑ m.
Proof. Admitted.
Lemma TimesAssociative : forall (m1 m2 m3 : mode), m1 ¬∑ (m2 ¬∑ m3) = (m1 ¬∑ m2) ¬∑ m3.
Proof. Admitted.
Lemma TimesIdentityRight : forall (m : mode), m ¬∑ ¬πŒΩ = m.
Proof. Admitted.
Lemma TimesIdentityLeft : forall (m : mode), ¬πŒΩ ¬∑ m = m.
Proof. Admitted.

Ltac hauto_ctx :=
  hauto
    depth: 3
    use: ValidOnlyUnionBackward, ValidOnlyUnionForward, ValidOnlyStimesEquiv, ValidOnlyMinusEquiv, DestOnlyUnionEquiv, DestOnlyStimesEquiv, LinNuOnlyUnionEquiv, LinNuOnlyStimesEquiv, LinOnlyUnionEquiv, LinOnlyStimesEquiv, LinNuOnlyWkLinOnly, LinOnlyWkValidOnly, IsLinNuWkIsLin, IsLinWkIsValid, DisjointStimesLeftEquiv, DisjointStimesRightEquiv, DisjointMinusLeftEquiv, DisjointMinusRightEquiv, DisjointNestedLeftEquiv, DisjointNestedRightEquiv, hdns_DisjointImpliesDisjoint, EmptyIsLinOnly, EmptyUnionLeft, EmptyUnionRight, DisjointDestOnlyVar, UnionCommutative, UnionAssociative, StimesIsAction, TimesCommutative, TimesAssociative, TimesIdentityRight, TimesIdentityLeft.

Lemma Ty_ectxs_LinOnlyD : forall (D : ctx) (C : ectxs) (T U0 : type) (TyC: D ‚ä£ C : T ‚Ü£ U0), ctx_LinOnly D.
Proof.
  intros D C T U0 H. induction H.
  - apply EmptyIsLinOnly.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - hauto_ctx.
  - assert (ctx_LinOnly (¬π‚Üë ·¥≥¬∑ D1)).
      { hauto l: on use: LinOnlyUnionEquiv, LinOnlyStimesEquiv, (mode_IsLinProof (Fin 1)). }
    assert (ctx_Disjoint (D1 ‚®Ñ D2) (·¥≥-D3)).
      { apply (hdns_DisjointImpliesDisjoint (D1 ‚®Ñ D2) (·¥≥-D3) C (U ‚ßî T') U0); tauto. }
    assert (ctx_Disjoint (¬π‚Üë ·¥≥¬∑ D1) D3).
      { sblast use: DisjointNestedLeftEquiv, DisjointMinusRightEquiv, DisjointStimesLeftEquiv. }
    rewrite (LinOnlyUnionEquiv (¬π‚Üë ·¥≥¬∑ D1) D3). split; tauto.
Qed.

Lemma tSubLemma : forall (D1 D2 : ctx) (m : mode) (T U : type) (u : term) (x : var) (v : val), ctx_DestOnly D1 -> ctx_DestOnly D2 -> (D2 ‚®Ñ ·¥≥{ x : m ‚Äó T} ‚ä¢ u : U) -> (D1 ‚ä¢ ·µ•‚Çé v : T) -> (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ u ·µó[ x ‚âî v] : U).
Proof. Admitted.

Lemma tSubLemma2 : forall (D11 D12 D2 : ctx) (m : mode) (T1 T2 U : type) (u : term) (x1 x2 : var) (v1 v2 : val), ctx_DestOnly D11 -> ctx_DestOnly D12 -> ctx_DestOnly D2 -> (ctx_Disjoint ·¥≥{ x1 : m ‚Äó T1} ·¥≥{ x2 : m ‚Äó T2}) -> (D2 ‚®Ñ ·¥≥{ x1 : m ‚Äó T1} ‚®Ñ ·¥≥{ x2 : m ‚Äó T2} ‚ä¢ u : U) -> (D11 ‚ä¢ ·µ•‚Çé v1 : T1) -> (D12 ‚ä¢ ·µ•‚Çé v2 : T2) -> (m ·¥≥¬∑ (D11 ‚®Ñ D12) ‚®Ñ D2 ‚ä¢ u ·µó[ x1 ‚âî v1 ] ·µó[ x2 ‚âî v2 ] : U).
Proof. Admitted.

(* TODO: bump only internal names of ampar *)

Theorem Preservation : forall (C C' : ectxs) (t t' : term) (T : type), ‚ä¢ C  ≤[t] : T /\
  C  ≤[t] ‚ü∂ C'  ≤[t'] -> ‚ä¢ C'  ≤[t'] : T.
Proof.
    intros C C' t t' T (Tyj & Redj). destruct Tyj. destruct Redj.
    - (* Sem-eterm-AppFoc1 *)
      inversion Tyt; subst.
      rename Tyt into TyApp, Tyt0 into Tyt, P1 into D1, P2 into D2, T into U, T0 into T.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      constructor 1 with (D := D1) (T := T) (t := t); swap 1 3. constructor 2 with (D2 := D2) (m := m) (t' := t') (U := U).
      all: hauto_ctx.
    - (* Sem-eterm-AppUnfoc1 *)
      inversion Tyt; subst. rename TyC into TyCc, D into D1, ValidOnlyD into ValidOnlyD1, DestOnlyD into DestOnlyD1. clear H1.
      inversion TyCc; subst. clear DestOnlyD0.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      assert (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ ·µ•‚Çé v ‚âª t' : U) as TyApp.
        { apply (Ty_term_App m D1 D2 (·µ•‚Çé v) t' U T); tauto. }
      constructor 1 with (D := (m ·¥≥¬∑ D1 ‚®Ñ D2)) (T := U) (t := ·µ•‚Çé v ‚âª t'). all: hauto_ctx.
    - (* Sem-eterm-AppFoc2 *)
      inversion Tyt; subst.
      rename Tyt into TyApp, Tyt0 into Tyt, P1 into D1, P2 into D2, T into U, T0 into T.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      constructor 1 with (D := D2) (T := T ‚Åî m ‚Üí U) (t := t'); swap 1 3. constructor 3 with (D1 := D1) (m := m) (v := v) (T := T) (U := U). all: hauto_ctx.
    - (* Sem-eterm-AppUnfoc2 *)
      inversion Tyt; subst. rename TyRv into TyRvp, TyC into TyCc, D into D2, ValidOnlyD into ValidOnlyD2, DestOnlyD into DestOnlyD2. clear H1.
      inversion TyCc; subst. clear DestOnlyD0. rename Tyt into Tytp, Tyv into Tyt, T0 into T.
      assert (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ ·µ•‚Çé v ‚âª ·µ•‚Çé v' : U) as TyApp.
        { apply (Ty_term_App m D1 D2 (·µ•‚Çé v) (·µ•‚Çé v') U T); tauto. }
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      constructor 1 with (D := (m ·¥≥¬∑ D1 ‚®Ñ D2)) (T := U) (t := (·µ•‚Çé v) ‚âª (·µ•‚Çé v')). all: hauto_ctx.
    - (* Sem-eterm-AppRed *)
      inversion Tyt; subst.
      assert (m = m0) as Eqmm0.
        { inversion_clear Tytp; inversion_clear TyRv; tauto. }
      rewrite <- Eqmm0 in Tyt, Tytp, TyC, DestOnlyD, ValidOnlyD. clear Eqmm0. clear m0. rename P1 into D1, P2 into D2. rename Tyt into TyApp, Tyt0 into Tyt, T into U, T0 into T.
      inversion Tytp; subst. clear H1. rename TyRv into TyRv'.
      inversion TyRv'; subst. rename H1 into DestOnlyD2.
      assert (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ u ·µó[ x ‚âî v] : U) as Tyusub.
        { apply (tSubLemma D1 D2 m T U u x v); hauto_ctx. }
      constructor 1 with (D := (m ·¥≥¬∑ D1 ‚®Ñ D2)) (T := U) (t := u ·µó[ x ‚âî v]). all: hauto_ctx.
    - (* Sem-eterm-PatUFoc *)
      inversion Tyt; subst.
      rename Tyt into TyPat, Tyt0 into Tyt, P1 into D1, P2 into D2, T into T2.
      assert (ctx_LinOnly (D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (D1 ‚®Ñ D2) C T2 U0); tauto. }
      constructor 1 with (D := D1) (T := ùüè) (t := t); swap 1 3. constructor 4 with (D2 := D2) (U := T2) (u := u). all: hauto_ctx.
    - (* Sem-eterm-PatUUnfoc *)
      inversion Tyt; subst. rename TyC into TyCc, D into D1, ValidOnlyD into ValidOnlyD1, DestOnlyD into DestOnlyD1. clear H1.
      inversion TyCc; subst. clear DestOnlyD0. rename U into T2.
      assert (ctx_LinOnly (D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (D1 ‚®Ñ D2) C T2 U0); tauto. }
      assert (D1 ‚®Ñ D2 ‚ä¢ ·µ•‚Çé v ·µó; u : T2) as TyPat.
        { apply (Ty_term_PatU D1 D2 (·µ•‚Çé v) u T2); tauto. }
      constructor 1 with (D := (D1 ‚®Ñ D2)) (T := T2) (t := ·µ•‚Çé v ·µó; u). all: hauto_ctx.
    - (* Sem-eterm-PatURed *)
      inversion Tyt; subst.
      rename P1 into D1, P2 into D2. rename Tyt into TyPat, Tyt0 into Tyt, T into T2.
      inversion Tyt; subst. rename H1 into DestOnlyD1.
      inversion TyRv; subst.
      constructor 1 with (D := D2) (T := T2) (t := u). all: hauto_ctx.
    - (* Sem-eterm-PatSFoc *)
      inversion Tyt; subst.
      rename Tyt into TyPat, Tyt0 into Tyt, P1 into D1, P2 into D2, T into U.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      constructor 1 with (D := D1) (T := (T1 ‚®Å T2)) (t := t) ; swap 1 3. constructor 5 with (D1 := D1) (D2 := D2) (m := m) (u1 := u1) (x1 := x1) (u2 := u2) (x2 := x2) (U := U). all: hauto_ctx.
    - (* Sem-eterm-PatSUnfoc *)
      inversion Tyt; subst. rename TyC into TyCc, D into D1, ValidOnlyD into ValidOnlyD1, DestOnlyD into DestOnlyD1. clear H1.
      inversion TyCc; subst. clear DestOnlyD0.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      assert (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ ·µ•‚Çé v ‚âªcaseÀ¢ m {Inl x1 ‚üº u1, Inr x2 ‚üº u2} : U) as TyPat.
        { apply (Ty_term_PatS m D1 D2 (·µ•‚Çé v) x1 u1 x2 u2 U T1 T2); hauto_ctx. }
      constructor 1 with (D := (m ·¥≥¬∑ D1 ‚®Ñ D2)) (T := U) (t := ·µ•‚Çé v ‚âªcaseÀ¢ m {Inl x1 ‚üº u1, Inr x2 ‚üº u2}). all: hauto_ctx.
    - (* Sem-eterm-PatLRed *)
      inversion Tyt; subst.
      rename P1 into D1, P2 into D2. rename Tyt into TyPat, Tyt0 into Tyt, T into U.
      inversion Tyt; subst. rename H1 into DestOnlyD1, TyRv into TyRInlv1.
      inversion TyRInlv1; subst.
      assert (D1 ‚ä¢ ·µ•‚Çé v1 : T1) as Tyt'.
        { apply Ty_term_Val; tauto. }
      assert (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ u1 ·µó[ x1 ‚âî v1] : U) as Tyusub.
        { apply (tSubLemma D1 D2 m T1 U u1 x1 v1); hauto_ctx. }
      constructor 1 with (D := (m ·¥≥¬∑ D1 ‚®Ñ D2)) (T := U) (t := u1 ·µó[ x1 ‚âî v1]). all: hauto_ctx.
    - (* Sem-eterm-PatRRed *)
      inversion Tyt; subst.
      rename P1 into D1, P2 into D2. rename Tyt into TyPat, Tyt0 into Tyt, T into U.
      inversion Tyt; subst. rename H1 into DestOnlyD1, TyRv into TyRInlv2.
      inversion TyRInlv2; subst.
      assert (D1 ‚ä¢ ·µ•‚Çé v2 : T2) as Tyt'.
        { apply Ty_term_Val; tauto. }
      assert (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ u2 ·µó[ x2 ‚âî v2] : U) as Tyusub.
        { apply (tSubLemma D1 D2 m T2 U u2 x2 v2); hauto_ctx. }
      constructor 1 with (D := (m ·¥≥¬∑ D1 ‚®Ñ D2)) (T := U) (t := u2 ·µó[ x2 ‚âî v2]). all: hauto_ctx.
    - (* Sem-eterm-PatPFoc *)
      inversion Tyt; subst.
      rename Tyt into TyPat, Tyt0 into Tyt, P1 into D1, P2 into D2, T into U.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      constructor 1 with (D := D1) (T := (T1 ‚®Ç T2)) (t := t) ; swap 1 3. constructor 6 with (D1 := D1) (D2 := D2) (u := u) (x1 := x1) (x2 := x2) (U := U). all: hauto_ctx.
    - (* Sem-eterm-PatPUnfoc *)
      inversion Tyt; subst. rename TyC into TyCc, D into D1, ValidOnlyD into ValidOnlyD1, DestOnlyD into DestOnlyD1. clear H1.
      inversion TyCc; subst. clear DestOnlyD0.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      assert (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ ·µ•‚Çé v ‚âªcase·µñ m ·µó(x1 , x2) ‚üº u : U) as TyPat.
        { apply (Ty_term_PatP m D1 D2 (·µ•‚Çé v) x1 x2 u U T1 T2); hauto_ctx. }
      constructor 1 with (D := (m ·¥≥¬∑ D1 ‚®Ñ D2)) (T := U) (t := ·µ•‚Çé v ‚âªcase·µñ m ·µó(x1 , x2) ‚üº u). all: hauto_ctx.
    - (* Sem-eterm-PatPRed *)
      inversion Tyt; subst.
      rename P1 into D1, P2 into D2. rename Tyt into TyPat, Tyt0 into Tyt, T into U.
      inversion Tyt; subst. rename H1 into DestOnlyD1.
      inversion TyRv; subst. rename G1 into D11, G2 into D12.
      assert (D11 ‚ä¢ ·µ•‚Çé v1 : T1) as Tyt1.
        { apply Ty_term_Val; hauto_ctx. }
      assert (D12 ‚ä¢ ·µ•‚Çé v2 : T2) as Tyt2.
        { apply Ty_term_Val; hauto_ctx. }
      assert (m ·¥≥¬∑ (D11 ‚®Ñ D12) ‚®Ñ D2 ‚ä¢ u ·µó[ x1 ‚âî v1] ·µó[ x2 ‚âî v2] : U) as Tyusub.
        { apply (tSubLemma2 D11 D12 D2 m T1 T2 U u x1 x2 v1 v2); hauto_ctx. }
      constructor 1 with (D := (m ·¥≥¬∑ (D11 ‚®Ñ D12) ‚®Ñ D2)) (T := U) (t := u ·µó[ x1 ‚âî v1] ·µó[ x2 ‚âî v2]). all: hauto_ctx.
    - (* Sem-eterm-PatEFoc *)
      inversion Tyt; subst.
      rename Tyt into TyPat, Tyt0 into Tyt, P1 into D1, P2 into D2, T into U, T0 into T.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      constructor 1 with (D := D1) (T := (! n ‚Åî T)) (t := t) ; swap 1 3. constructor 7 with (D1 := D1) (D2 := D2) (u := u) (x := x) (U := U). all: hauto_ctx.
    - (* Sem-eterm-PatEUnfoc *)
      inversion Tyt; subst. rename TyC into TyCc, D into D1, ValidOnlyD into ValidOnlyD1, DestOnlyD into DestOnlyD1. clear H1.
      inversion TyCc; subst. clear DestOnlyD0. rename T0 into T.
      assert (ctx_LinOnly (m ·¥≥¬∑ D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (m ·¥≥¬∑ D1 ‚®Ñ D2) C U U0); tauto. }
      assert (m ·¥≥¬∑ D1 ‚®Ñ D2 ‚ä¢ ·µ•‚Çé v ‚âªcase·µâ m ·¥á n ‚Åî x ‚üº u : U) as TyPat.
        { apply (Ty_term_PatE m D1 D2 (·µ•‚Çé v) n x u U T); hauto_ctx. }
      constructor 1 with (D := (m ·¥≥¬∑ D1 ‚®Ñ D2)) (T := U) (t := ·µ•‚Çé v ‚âªcase·µâ m ·¥á n ‚Åî x ‚üº u). all: hauto_ctx.
    - (* Sem-eterm-PatERed *)
      inversion Tyt; subst.
      rename P1 into D1, P2 into D2. rename Tyt into TyPat, Tyt0 into Tyt, T into U, T0 into T.
      inversion Tyt; subst. rename H1 into DestOnlyD1.
      inversion TyRv; subst.
      assert (G ‚ä¢ ·µ•‚Çé v' : T) as Tyt'.
        { apply Ty_term_Val; hauto_ctx. }
      assert ((m ¬∑ n) ·¥≥¬∑ G ‚®Ñ D2 ‚ä¢ u ·µó[ x ‚âî v'] : U) as Tyusub.
        { apply (tSubLemma G D2 (m ¬∑ n) T U u x v'). all: try hauto_ctx. }
      constructor 1 with (D := (m ·¥≥¬∑ (n ·¥≥¬∑ G) ‚®Ñ D2)) (T := U) (t := u ·µó[ x ‚âî v']). all: hauto_ctx.
    - (* Sem-eterm-MapFoc *)
      inversion Tyt; subst. rename T0 into T.
      rename Tyt into TyMap, Tyt0 into Tyt, P1 into D1, P2 into D2.
      assert (ctx_LinOnly (D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (D1 ‚®Ñ D2) C (U ‚ßî T') U0); tauto. }
      constructor 1 with (D := D1) (T := U ‚ßî T) (t := t); swap 1 3. constructor 8 with (D1 := D1) (D2 := D2) (t' := t') (x := x) (T := T) (T' := T') (U := U). all: hauto_ctx.
    - (* Sem-eterm-MapUnfoc *)
      inversion Tyt; subst. rename TyC into TyCc, D into D1, ValidOnlyD into ValidOnlyD1, DestOnlyD into DestOnlyD1. clear H1.
      inversion TyCc; subst. clear DestOnlyD0. rename T0 into T.
      assert (ctx_LinOnly (D1 ‚®Ñ D2)) as LinOnlyD.
        { apply (Ty_ectxs_LinOnlyD (D1 ‚®Ñ D2) C (U ‚ßî T') U0); tauto. }
      assert (D1 ‚®Ñ D2 ‚ä¢ ·µ•‚Çé v ‚âªmap x ‚üº t' : U ‚ßî T') as TyMap.
        { apply (Ty_term_Map D1 D2 (·µ•‚Çé v) x t' U T' T); hauto_ctx. }
      constructor 1 with (D := (D1 ‚®Ñ D2)) (T := U ‚ßî T') (t := ·µ•‚Çé v ‚âªmap x ‚üº t'). all: hauto_ctx.
    - (* Sem-eterm-MapRedAOpenFoc *)
      inversion Tyt; subst.
      rename P1 into D1, P2 into D2. rename Tyt into TyMap, Tyt0 into Tyt, T0 into T.
      inversion Tyt; subst. rename H2 into DestOnlyD1.
      assert (D1 ‚ä¢ ·µ•‚Çé H ‚ü® v2 ‚ùü v1 ‚ü© : U ‚ßî T) as Tyt'.
        { apply Ty_term_Val; hauto_ctx. }
      admit.
    - give_up.
Admitted.


