type List T := μ X ⟼ 1 ⨁ (T ⨂ X)

operator
    ⨞ [] : ⌊ List T ⌋ n ¹ν → ①
    t ⨞ [] := t ⨞Inl ⨞()

operator
    ⨞ (:) : ⌊ List T ⌋ n ¹ν → ⌊ T⌋ n ⨂ ⌊ List T ⌋ n
    t ⨞ (:) := t ⨞Inr ⨞(,)

type DList T := (List T) ⧔ (⌊ List T ⌋ ¹ν)

operator
    snoc : DList T ¹ν → T ¹ν → DList T
    t snoc t' := t map d ⟼ d ⨞ Cons case ¹ν (dh, dt) ⟼ dh ⨞ t' ; dt

operator
    concat : DList T ¹ν → DList T ¹ν → DList T
    t concat t' := t map d ⟼ d ⨞· t'

operator
    toList : DList T ¹ν → List T
    toList t := from⧔' (t map d ⟼ d ⨞· Nil)

type Queue T := (List T) ⨂ (DList T)

operator
    enqueue : Queue T ¹ν → T ¹ν → Queue T
    t enqueue t' := t case ¹ν (x, y) ⟼ ˢ(x, y snoc t')

operator
    dequeue : Queue T ¹ν → ① ⨁ (T ⨂ Queue T)
    dequeue t := t case ¹ν (x, y) ⟼ x case ¹ν {
        Inl un ⟼ un ; toList y case ¹ν {
            Inl un ⟼ ˢInl un,
            Inr y' ⟼ y' case ¹ν (y1', y2') ⟼ ˢInr ˢ(y1', ˢ(y2', alloc))
        },
        Inr x' ⟼ case ¹ν (x1', y1') ⟼ ˢInr ˢ(x1', ˢ(y1', y))
    }

type Tree T := μ X ⟼ 1 ⨁ (T ⨂ (X ⨂ X))

operator
    ⨞ Leaf : ⌊ Tree T ⌋ n ¹ν → ①
    t ⨞ Leaf := t ⨞Inl ⨞()

operator
    ⨞ Node : ⌊ Tree T ⌋ n ¹ν → ⌊T⌋ n ⨂ (⌊ Tree T⌋ n ⨂ ⌊ Tree T⌋ n)
    t ⨞ Node := t ⨞Inr ⨞(,) case ¹ν (dn, dlr) ⟼ ˢ(dn, dlr ⨞(,))
